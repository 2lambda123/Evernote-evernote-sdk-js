//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.fullSyncBefore !== undefined) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Preferences = function(args) {
  this.updateSequenceNum = null;
  this.preferences = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.preferences !== undefined) {
      this.preferences = args.preferences;
    }
  }
};
Preferences.prototype = {};
Preferences.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.preferences = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          var _size8 = 0;
          var _rtmp312;
          val7 = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var elem14 = null;
            elem14 = input.readString().value;
            val7.push(elem14);
          }
          input.readListEnd();
          this.preferences[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Preferences.prototype.write = function(output) {
  output.writeStructBegin('Preferences');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.preferences !== null && this.preferences !== undefined) {
    output.writeFieldBegin('preferences', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.preferences));
    for (var kiter15 in this.preferences)
    {
      if (this.preferences.hasOwnProperty(kiter15))
      {
        var viter16 = this.preferences[kiter15];
        output.writeString(kiter15);
        output.writeListBegin(Thrift.Type.STRING, viter16.length);
        for (var iter17 in viter16)
        {
          if (viter16.hasOwnProperty(iter17))
          {
            iter17 = viter16[iter17];
            output.writeString(iter17);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  this.preferences = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.chunkHighUSN !== undefined) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.searches !== undefined) {
      this.searches = args.searches;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.expungedNotes !== undefined) {
      this.expungedNotes = args.expungedNotes;
    }
    if (args.expungedNotebooks !== undefined) {
      this.expungedNotebooks = args.expungedNotebooks;
    }
    if (args.expungedTags !== undefined) {
      this.expungedTags = args.expungedTags;
    }
    if (args.expungedSearches !== undefined) {
      this.expungedSearches = args.expungedSearches;
    }
    if (args.linkedNotebooks !== undefined) {
      this.linkedNotebooks = args.linkedNotebooks;
    }
    if (args.expungedLinkedNotebooks !== undefined) {
      this.expungedLinkedNotebooks = args.expungedLinkedNotebooks;
    }
    if (args.preferences !== undefined) {
      this.preferences = args.preferences;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.notes = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new Note();
          elem24.read(input);
          this.notes.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.notebooks = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = new Notebook();
          elem31.read(input);
          this.notebooks.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.tags = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Tag();
          elem38.read(input);
          this.tags.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.searches = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new SavedSearch();
          elem45.read(input);
          this.searches.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.resources = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new Resource();
          elem52.read(input);
          this.resources.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size53 = 0;
        var _rtmp357;
        this.expungedNotes = [];
        var _etype56 = 0;
        _rtmp357 = input.readListBegin();
        _etype56 = _rtmp357.etype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          var elem59 = null;
          elem59 = input.readString().value;
          this.expungedNotes.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.expungedNotebooks = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString().value;
          this.expungedNotebooks.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size67 = 0;
        var _rtmp371;
        this.expungedTags = [];
        var _etype70 = 0;
        _rtmp371 = input.readListBegin();
        _etype70 = _rtmp371.etype;
        _size67 = _rtmp371.size;
        for (var _i72 = 0; _i72 < _size67; ++_i72)
        {
          var elem73 = null;
          elem73 = input.readString().value;
          this.expungedTags.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.expungedSearches = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readString().value;
          this.expungedSearches.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size81 = 0;
        var _rtmp385;
        this.linkedNotebooks = [];
        var _etype84 = 0;
        _rtmp385 = input.readListBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = new LinkedNotebook();
          elem87.read(input);
          this.linkedNotebooks.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.expungedLinkedNotebooks = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString().value;
          this.expungedLinkedNotebooks.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.preferences = new Preferences();
        this.preferences.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN !== null && this.chunkHighUSN !== undefined) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter95 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter95))
      {
        iter95 = this.notes[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter96 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter96))
      {
        iter96 = this.notebooks[iter96];
        iter96.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter97 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter97))
      {
        iter97 = this.tags[iter97];
        iter97.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches !== null && this.searches !== undefined) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter98 in this.searches)
    {
      if (this.searches.hasOwnProperty(iter98))
      {
        iter98 = this.searches[iter98];
        iter98.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter99 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter99))
      {
        iter99 = this.resources[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes !== null && this.expungedNotes !== undefined) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter100 in this.expungedNotes)
    {
      if (this.expungedNotes.hasOwnProperty(iter100))
      {
        iter100 = this.expungedNotes[iter100];
        output.writeString(iter100);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks !== null && this.expungedNotebooks !== undefined) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter101 in this.expungedNotebooks)
    {
      if (this.expungedNotebooks.hasOwnProperty(iter101))
      {
        iter101 = this.expungedNotebooks[iter101];
        output.writeString(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags !== null && this.expungedTags !== undefined) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter102 in this.expungedTags)
    {
      if (this.expungedTags.hasOwnProperty(iter102))
      {
        iter102 = this.expungedTags[iter102];
        output.writeString(iter102);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches !== null && this.expungedSearches !== undefined) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter103 in this.expungedSearches)
    {
      if (this.expungedSearches.hasOwnProperty(iter103))
      {
        iter103 = this.expungedSearches[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks !== null && this.linkedNotebooks !== undefined) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter104 in this.linkedNotebooks)
    {
      if (this.linkedNotebooks.hasOwnProperty(iter104))
      {
        iter104 = this.linkedNotebooks[iter104];
        iter104.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks !== null && this.expungedLinkedNotebooks !== undefined) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter105 in this.expungedLinkedNotebooks)
    {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter105))
      {
        iter105 = this.expungedLinkedNotebooks[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.preferences !== null && this.preferences !== undefined) {
    output.writeFieldBegin('preferences', Thrift.Type.STRUCT, 15);
    this.preferences.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.includePreferences = null;
  this.requireNoteContentClass = null;
  if (args) {
    if (args.includeNotes !== undefined) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.includePreferences !== undefined) {
      this.includePreferences = args.includePreferences;
    }
    if (args.requireNoteContentClass !== undefined) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includePreferences = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype.write = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes !== null && this.includeNotes !== undefined) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources !== null && this.includeNoteResources !== undefined) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes !== null && this.includeNoteAttributes !== undefined) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags !== null && this.includeTags !== undefined) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches !== null && this.includeSearches !== undefined) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources !== null && this.includeResources !== undefined) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks !== null && this.includeLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged !== null && this.includeExpunged !== undefined) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap !== null && this.includeNoteApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap !== null && this.includeResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap !== null && this.includeNoteResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includePreferences !== null && this.includePreferences !== undefined) {
    output.writeFieldBegin('includePreferences', Thrift.Type.BOOL, 14);
    output.writeBool(this.includePreferences);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass !== null && this.requireNoteContentClass !== undefined) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  this.emphasized = null;
  if (args) {
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined) {
      this.inactive = args.inactive;
    }
    if (args.emphasized !== undefined) {
      this.emphasized = args.emphasized;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.tagGuids = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readString().value;
          this.tagGuids.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.emphasized = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype.write = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter113 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter113))
      {
        iter113 = this.tagGuids[iter113];
        output.writeString(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive !== null && this.inactive !== undefined) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  if (this.emphasized !== null && this.emphasized !== undefined) {
    output.writeFieldBegin('emphasized', Thrift.Type.STRING, 8);
    output.writeString(this.emphasized);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.notes = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new Note();
          elem120.read(input);
          this.notes.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size121 = 0;
        var _rtmp3125;
        this.stoppedWords = [];
        var _etype124 = 0;
        _rtmp3125 = input.readListBegin();
        _etype124 = _rtmp3125.etype;
        _size121 = _rtmp3125.size;
        for (var _i126 = 0; _i126 < _size121; ++_i126)
        {
          var elem127 = null;
          elem127 = input.readString().value;
          this.stoppedWords.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.searchedWords = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString().value;
          this.searchedWords.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype.write = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter135 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter135))
      {
        iter135 = this.notes[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter136 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter136))
      {
        iter136 = this.stoppedWords[iter136];
        output.writeString(iter136);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter137 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter137))
      {
        iter137 = this.searchedWords[iter137];
        output.writeString(iter137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.largestResourceMime !== undefined) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.tagGuids = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = input.readString().value;
          this.tagGuids.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype.write = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter145 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter145))
      {
        iter145 = this.tagGuids[iter145];
        output.writeString(iter145);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime !== null && this.largestResourceMime !== undefined) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize !== null && this.largestResourceSize !== undefined) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.notes = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new NoteMetadata();
          elem152.read(input);
          this.notes.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size153 = 0;
        var _rtmp3157;
        this.stoppedWords = [];
        var _etype156 = 0;
        _rtmp3157 = input.readListBegin();
        _etype156 = _rtmp3157.etype;
        _size153 = _rtmp3157.size;
        for (var _i158 = 0; _i158 < _size153; ++_i158)
        {
          var elem159 = null;
          elem159 = input.readString().value;
          this.stoppedWords.push(elem159);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.searchedWords = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString().value;
          this.searchedWords.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter167 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter167))
      {
        iter167 = this.notes[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter168 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter168))
      {
        iter168 = this.stoppedWords[iter168];
        output.writeString(iter168);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter169 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter169))
      {
        iter169 = this.searchedWords[iter169];
        output.writeString(iter169);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeUpdateSequenceNum !== undefined) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle !== null && this.includeTitle !== undefined) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength !== null && this.includeContentLength !== undefined) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated !== null && this.includeCreated !== undefined) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated !== null && this.includeUpdated !== undefined) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum !== null && this.includeUpdateSequenceNum !== undefined) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid !== null && this.includeNotebookGuid !== undefined) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids !== null && this.includeTagGuids !== undefined) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime !== null && this.includeLargestResourceMime !== undefined) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize !== null && this.includeLargestResourceSize !== undefined) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined) {
      this.notebookCounts = args.notebookCounts;
    }
    if (args.tagCounts !== undefined) {
      this.tagCounts = args.tagCounts;
    }
    if (args.trashCount !== undefined) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size170 = 0;
        var _rtmp3174;
        this.notebookCounts = {};
        var _ktype171 = 0;
        var _vtype172 = 0;
        _rtmp3174 = input.readMapBegin();
        _ktype171 = _rtmp3174.ktype;
        _vtype172 = _rtmp3174.vtype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          if (_i175 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key176 = null;
          var val177 = null;
          key176 = input.readString().value;
          val177 = input.readI32().value;
          this.notebookCounts[key176] = val177;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size178 = 0;
        var _rtmp3182;
        this.tagCounts = {};
        var _ktype179 = 0;
        var _vtype180 = 0;
        _rtmp3182 = input.readMapBegin();
        _ktype179 = _rtmp3182.ktype;
        _vtype180 = _rtmp3182.vtype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          if (_i183 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key184 = null;
          var val185 = null;
          key184 = input.readString().value;
          val185 = input.readI32().value;
          this.tagCounts[key184] = val185;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype.write = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts !== null && this.notebookCounts !== undefined) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter186 in this.notebookCounts)
    {
      if (this.notebookCounts.hasOwnProperty(kiter186))
      {
        var viter187 = this.notebookCounts[kiter186];
        output.writeString(kiter186);
        output.writeI32(viter187);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts !== null && this.tagCounts !== undefined) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter188 in this.tagCounts)
    {
      if (this.tagCounts.hasOwnProperty(kiter188))
      {
        var viter189 = this.tagCounts[kiter188];
        output.writeString(kiter188);
        output.writeI32(viter189);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount !== null && this.trashCount !== undefined) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.toAddresses !== undefined) {
      this.toAddresses = args.toAddresses;
    }
    if (args.ccAddresses !== undefined) {
      this.ccAddresses = args.ccAddresses;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.toAddresses = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = input.readString().value;
          this.toAddresses.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size197 = 0;
        var _rtmp3201;
        this.ccAddresses = [];
        var _etype200 = 0;
        _rtmp3201 = input.readListBegin();
        _etype200 = _rtmp3201.etype;
        _size197 = _rtmp3201.size;
        for (var _i202 = 0; _i202 < _size197; ++_i202)
        {
          var elem203 = null;
          elem203 = input.readString().value;
          this.ccAddresses.push(elem203);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype.write = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddresses !== null && this.toAddresses !== undefined) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter204 in this.toAddresses)
    {
      if (this.toAddresses.hasOwnProperty(iter204))
      {
        iter204 = this.toAddresses[iter204];
        output.writeString(iter204);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses !== null && this.ccAddresses !== undefined) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter205 in this.ccAddresses)
    {
      if (this.ccAddresses.hasOwnProperty(iter205))
      {
        iter205 = this.ccAddresses[iter205];
        output.writeString(iter205);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.saved !== undefined) {
      this.saved = args.saved;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype.write = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved !== null && this.saved !== undefined) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientUsageMetrics = function(args) {
  this.sessions = null;
  this.subjectConsumerKey = null;
  this.subjectConsumerSecret = null;
  if (args) {
    if (args.sessions !== undefined) {
      this.sessions = args.sessions;
    }
    if (args.subjectConsumerKey !== undefined) {
      this.subjectConsumerKey = args.subjectConsumerKey;
    }
    if (args.subjectConsumerSecret !== undefined) {
      this.subjectConsumerSecret = args.subjectConsumerSecret;
    }
  }
};
ClientUsageMetrics.prototype = {};
ClientUsageMetrics.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sessions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subjectConsumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subjectConsumerSecret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientUsageMetrics.prototype.write = function(output) {
  output.writeStructBegin('ClientUsageMetrics');
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.I32, 1);
    output.writeI32(this.sessions);
    output.writeFieldEnd();
  }
  if (this.subjectConsumerKey !== null && this.subjectConsumerKey !== undefined) {
    output.writeFieldBegin('subjectConsumerKey', Thrift.Type.STRING, 2);
    output.writeString(this.subjectConsumerKey);
    output.writeFieldEnd();
  }
  if (this.subjectConsumerSecret !== null && this.subjectConsumerSecret !== undefined) {
    output.writeFieldBegin('subjectConsumerSecret', Thrift.Type.STRING, 3);
    output.writeString(this.subjectConsumerSecret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedQuery = function(args) {
  this.noteGuid = null;
  this.plainText = null;
  this.filter = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.plainText !== undefined) {
      this.plainText = args.plainText;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
RelatedQuery.prototype = {};
RelatedQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plainText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedQuery.prototype.write = function(output) {
  output.writeStructBegin('RelatedQuery');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.plainText !== null && this.plainText !== undefined) {
    output.writeFieldBegin('plainText', Thrift.Type.STRING, 2);
    output.writeString(this.plainText);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResult = function(args) {
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.containingNotebooks = null;
  this.debugInfo = null;
  if (args) {
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.containingNotebooks !== undefined) {
      this.containingNotebooks = args.containingNotebooks;
    }
    if (args.debugInfo !== undefined) {
      this.debugInfo = args.debugInfo;
    }
  }
};
RelatedResult.prototype = {};
RelatedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size206 = 0;
        var _rtmp3210;
        this.notes = [];
        var _etype209 = 0;
        _rtmp3210 = input.readListBegin();
        _etype209 = _rtmp3210.etype;
        _size206 = _rtmp3210.size;
        for (var _i211 = 0; _i211 < _size206; ++_i211)
        {
          var elem212 = null;
          elem212 = new Note();
          elem212.read(input);
          this.notes.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size213 = 0;
        var _rtmp3217;
        this.notebooks = [];
        var _etype216 = 0;
        _rtmp3217 = input.readListBegin();
        _etype216 = _rtmp3217.etype;
        _size213 = _rtmp3217.size;
        for (var _i218 = 0; _i218 < _size213; ++_i218)
        {
          var elem219 = null;
          elem219 = new Notebook();
          elem219.read(input);
          this.notebooks.push(elem219);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.tags = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new Tag();
          elem226.read(input);
          this.tags.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size227 = 0;
        var _rtmp3231;
        this.containingNotebooks = [];
        var _etype230 = 0;
        _rtmp3231 = input.readListBegin();
        _etype230 = _rtmp3231.etype;
        _size227 = _rtmp3231.size;
        for (var _i232 = 0; _i232 < _size227; ++_i232)
        {
          var elem233 = null;
          elem233 = new NotebookDescriptor();
          elem233.read(input);
          this.containingNotebooks.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResult.prototype.write = function(output) {
  output.writeStructBegin('RelatedResult');
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter234 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter234))
      {
        iter234 = this.notes[iter234];
        iter234.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter235 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter235))
      {
        iter235 = this.notebooks[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter236 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter236))
      {
        iter236 = this.tags[iter236];
        iter236.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containingNotebooks !== null && this.containingNotebooks !== undefined) {
    output.writeFieldBegin('containingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.containingNotebooks.length);
    for (var iter237 in this.containingNotebooks)
    {
      if (this.containingNotebooks.hasOwnProperty(iter237))
      {
        iter237 = this.containingNotebooks[iter237];
        iter237.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 5);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResultSpec = function(args) {
  this.maxNotes = null;
  this.maxNotebooks = null;
  this.maxTags = null;
  this.writableNotebooksOnly = null;
  this.includeContainingNotebooks = null;
  this.includeDebugInfo = null;
  if (args) {
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
    if (args.maxNotebooks !== undefined) {
      this.maxNotebooks = args.maxNotebooks;
    }
    if (args.maxTags !== undefined) {
      this.maxTags = args.maxTags;
    }
    if (args.writableNotebooksOnly !== undefined) {
      this.writableNotebooksOnly = args.writableNotebooksOnly;
    }
    if (args.includeContainingNotebooks !== undefined) {
      this.includeContainingNotebooks = args.includeContainingNotebooks;
    }
    if (args.includeDebugInfo !== undefined) {
      this.includeDebugInfo = args.includeDebugInfo;
    }
  }
};
RelatedResultSpec.prototype = {};
RelatedResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxNotebooks = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTags = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.writableNotebooksOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContainingNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDebugInfo = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResultSpec.prototype.write = function(output) {
  output.writeStructBegin('RelatedResultSpec');
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 1);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.maxNotebooks !== null && this.maxNotebooks !== undefined) {
    output.writeFieldBegin('maxNotebooks', Thrift.Type.I32, 2);
    output.writeI32(this.maxNotebooks);
    output.writeFieldEnd();
  }
  if (this.maxTags !== null && this.maxTags !== undefined) {
    output.writeFieldBegin('maxTags', Thrift.Type.I32, 3);
    output.writeI32(this.maxTags);
    output.writeFieldEnd();
  }
  if (this.writableNotebooksOnly !== null && this.writableNotebooksOnly !== undefined) {
    output.writeFieldBegin('writableNotebooksOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.writableNotebooksOnly);
    output.writeFieldEnd();
  }
  if (this.includeContainingNotebooks !== null && this.includeContainingNotebooks !== undefined) {
    output.writeFieldBegin('includeContainingNotebooks', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContainingNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeDebugInfo !== null && this.includeDebugInfo !== undefined) {
    output.writeFieldBegin('includeDebugInfo', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeDebugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

