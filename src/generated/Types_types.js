//
// Autogenerated by Thrift Compiler (0.6.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

PrivilegeLevel = {
'NORMAL' : 1,
'PREMIUM' : 3,
'VIP' : 5,
'MANAGER' : 7,
'SUPPORT' : 8,
'ADMIN' : 9
};
ServiceLevel = {
'BASIC' : 1,
'PLUS' : 2,
'PREMIUM' : 3
};
QueryFormat = {
'USER' : 1,
'SEXP' : 2
};
NoteSortOrder = {
'CREATED' : 1,
'UPDATED' : 2,
'RELEVANCE' : 3,
'UPDATE_SEQUENCE_NUMBER' : 4,
'TITLE' : 5
};
PremiumOrderStatus = {
'NONE' : 0,
'PENDING' : 1,
'ACTIVE' : 2,
'FAILED' : 3,
'CANCELLATION_PENDING' : 4,
'CANCELED' : 5
};
SharedNotebookPrivilegeLevel = {
'READ_NOTEBOOK' : 0,
'MODIFY_NOTEBOOK_PLUS_ACTIVITY' : 1,
'READ_NOTEBOOK_PLUS_ACTIVITY' : 2,
'GROUP' : 3,
'FULL_ACCESS' : 4,
'BUSINESS_FULL_ACCESS' : 5
};
SharedNotePrivilegeLevel = {
'READ_NOTE' : 0,
'MODIFY_NOTE' : 1,
'FULL_ACCESS' : 2
};
SponsoredGroupRole = {
'GROUP_MEMBER' : 1,
'GROUP_ADMIN' : 2,
'GROUP_OWNER' : 3
};
BusinessUserRole = {
'ADMIN' : 1,
'NORMAL' : 2
};
SharedNotebookInstanceRestrictions = {
'ASSIGNED' : 1,
'NO_SHARED_NOTEBOOKS' : 2
};
ReminderEmailConfig = {
'DO_NOT_SEND' : 1,
'SEND_DAILY_EMAIL' : 2
};
BusinessInvitationStatus = {
'APPROVED' : 0,
'REQUESTED' : 1,
'REDEEMED' : 2
};
ContactType = {
'EVERNOTE' : 1,
'SMS' : 2,
'FACEBOOK' : 3,
'EMAIL' : 4,
'TWITTER' : 5,
'LINKEDIN' : 6
};
RelatedContentType = {
'NEWS_ARTICLE' : 1,
'PROFILE_PERSON' : 2,
'PROFILE_ORGANIZATION' : 3,
'REFERENCE_MATERIAL' : 4
};
RelatedContentAccess = {
'NOT_ACCESSIBLE' : 0,
'DIRECT_LINK_ACCESS_OK' : 1,
'DIRECT_LINK_LOGIN_REQUIRED' : 2,
'DIRECT_LINK_EMBEDDED_VIEW' : 3
};
UserIdentityType = {
'EVERNOTE_USERID' : 1,
'EMAIL' : 2,
'IDENTITYID' : 3
};
CLASSIFICATION_RECIPE_USER_NON_RECIPE = '000';
CLASSIFICATION_RECIPE_USER_RECIPE = '001';
CLASSIFICATION_RECIPE_SERVICE_RECIPE = '002';
EDAM_NOTE_SOURCE_WEB_CLIP = 'web.clip';
EDAM_NOTE_SOURCE_WEB_CLIP_SIMPLIFIED = 'Clearly';
EDAM_NOTE_SOURCE_MAIL_CLIP = 'mail.clip';
EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = 'mail.smtp';
Data = function(args) {
  this.bodyHash = null;
  this.size = null;
  this.body = null;
  if (args) {
    if (args.bodyHash !== undefined) {
      this.bodyHash = args.bodyHash;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.body !== undefined) {
      this.body = args.body;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.bodyHash !== null && this.bodyHash !== undefined) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1);
    output.writeBinary(this.bodyHash);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAttributes = function(args) {
  this.defaultLocationName = null;
  this.defaultLatitude = null;
  this.defaultLongitude = null;
  this.preactivation = null;
  this.viewedPromotions = null;
  this.incomingEmailAddress = null;
  this.recentMailedAddresses = null;
  this.comments = null;
  this.dateAgreedToTermsOfService = null;
  this.maxReferrals = null;
  this.referralCount = null;
  this.refererCode = null;
  this.sentEmailDate = null;
  this.sentEmailCount = null;
  this.dailyEmailLimit = null;
  this.emailOptOutDate = null;
  this.partnerEmailOptInDate = null;
  this.preferredLanguage = null;
  this.preferredCountry = null;
  this.clipFullPage = null;
  this.twitterUserName = null;
  this.twitterId = null;
  this.groupName = null;
  this.recognitionLanguage = null;
  this.referralProof = null;
  this.educationalDiscount = null;
  this.businessAddress = null;
  this.hideSponsorBilling = null;
  this.taxExempt = null;
  this.useEmailAutoFiling = null;
  this.reminderEmailConfig = null;
  this.emailAddressLastConfirmed = null;
  this.passwordUpdated = null;
  this.salesforcePushEnabled = null;
  this.shouldLogClientEvent = null;
  if (args) {
    if (args.defaultLocationName !== undefined) {
      this.defaultLocationName = args.defaultLocationName;
    }
    if (args.defaultLatitude !== undefined) {
      this.defaultLatitude = args.defaultLatitude;
    }
    if (args.defaultLongitude !== undefined) {
      this.defaultLongitude = args.defaultLongitude;
    }
    if (args.preactivation !== undefined) {
      this.preactivation = args.preactivation;
    }
    if (args.viewedPromotions !== undefined) {
      this.viewedPromotions = args.viewedPromotions;
    }
    if (args.incomingEmailAddress !== undefined) {
      this.incomingEmailAddress = args.incomingEmailAddress;
    }
    if (args.recentMailedAddresses !== undefined) {
      this.recentMailedAddresses = args.recentMailedAddresses;
    }
    if (args.comments !== undefined) {
      this.comments = args.comments;
    }
    if (args.dateAgreedToTermsOfService !== undefined) {
      this.dateAgreedToTermsOfService = args.dateAgreedToTermsOfService;
    }
    if (args.maxReferrals !== undefined) {
      this.maxReferrals = args.maxReferrals;
    }
    if (args.referralCount !== undefined) {
      this.referralCount = args.referralCount;
    }
    if (args.refererCode !== undefined) {
      this.refererCode = args.refererCode;
    }
    if (args.sentEmailDate !== undefined) {
      this.sentEmailDate = args.sentEmailDate;
    }
    if (args.sentEmailCount !== undefined) {
      this.sentEmailCount = args.sentEmailCount;
    }
    if (args.dailyEmailLimit !== undefined) {
      this.dailyEmailLimit = args.dailyEmailLimit;
    }
    if (args.emailOptOutDate !== undefined) {
      this.emailOptOutDate = args.emailOptOutDate;
    }
    if (args.partnerEmailOptInDate !== undefined) {
      this.partnerEmailOptInDate = args.partnerEmailOptInDate;
    }
    if (args.preferredLanguage !== undefined) {
      this.preferredLanguage = args.preferredLanguage;
    }
    if (args.preferredCountry !== undefined) {
      this.preferredCountry = args.preferredCountry;
    }
    if (args.clipFullPage !== undefined) {
      this.clipFullPage = args.clipFullPage;
    }
    if (args.twitterUserName !== undefined) {
      this.twitterUserName = args.twitterUserName;
    }
    if (args.twitterId !== undefined) {
      this.twitterId = args.twitterId;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
    if (args.recognitionLanguage !== undefined) {
      this.recognitionLanguage = args.recognitionLanguage;
    }
    if (args.referralProof !== undefined) {
      this.referralProof = args.referralProof;
    }
    if (args.educationalDiscount !== undefined) {
      this.educationalDiscount = args.educationalDiscount;
    }
    if (args.businessAddress !== undefined) {
      this.businessAddress = args.businessAddress;
    }
    if (args.hideSponsorBilling !== undefined) {
      this.hideSponsorBilling = args.hideSponsorBilling;
    }
    if (args.taxExempt !== undefined) {
      this.taxExempt = args.taxExempt;
    }
    if (args.useEmailAutoFiling !== undefined) {
      this.useEmailAutoFiling = args.useEmailAutoFiling;
    }
    if (args.reminderEmailConfig !== undefined) {
      this.reminderEmailConfig = args.reminderEmailConfig;
    }
    if (args.emailAddressLastConfirmed !== undefined) {
      this.emailAddressLastConfirmed = args.emailAddressLastConfirmed;
    }
    if (args.passwordUpdated !== undefined) {
      this.passwordUpdated = args.passwordUpdated;
    }
    if (args.salesforcePushEnabled !== undefined) {
      this.salesforcePushEnabled = args.salesforcePushEnabled;
    }
    if (args.shouldLogClientEvent !== undefined) {
      this.shouldLogClientEvent = args.shouldLogClientEvent;
    }
  }
};
UserAttributes.prototype = {};
UserAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.defaultLocationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLatitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLongitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preactivation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.viewedPromotions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.viewedPromotions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.incomingEmailAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.recentMailedAddresses = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.recentMailedAddresses.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.dateAgreedToTermsOfService = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.maxReferrals = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.referralCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.refererCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.sentEmailDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.sentEmailCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.dailyEmailLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.emailOptOutDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.partnerEmailOptInDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.preferredLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.preferredCountry = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.clipFullPage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.twitterUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.twitterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.recognitionLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.referralProof = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.educationalDiscount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.businessAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.hideSponsorBilling = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.taxExempt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.useEmailAutoFiling = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.reminderEmailConfig = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I64) {
        this.emailAddressLastConfirmed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.passwordUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.BOOL) {
        this.salesforcePushEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.BOOL) {
        this.shouldLogClientEvent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAttributes.prototype.write = function(output) {
  output.writeStructBegin('UserAttributes');
  if (this.defaultLocationName !== null && this.defaultLocationName !== undefined) {
    output.writeFieldBegin('defaultLocationName', Thrift.Type.STRING, 1);
    output.writeString(this.defaultLocationName);
    output.writeFieldEnd();
  }
  if (this.defaultLatitude !== null && this.defaultLatitude !== undefined) {
    output.writeFieldBegin('defaultLatitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.defaultLatitude);
    output.writeFieldEnd();
  }
  if (this.defaultLongitude !== null && this.defaultLongitude !== undefined) {
    output.writeFieldBegin('defaultLongitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.defaultLongitude);
    output.writeFieldEnd();
  }
  if (this.preactivation !== null && this.preactivation !== undefined) {
    output.writeFieldBegin('preactivation', Thrift.Type.BOOL, 4);
    output.writeBool(this.preactivation);
    output.writeFieldEnd();
  }
  if (this.viewedPromotions !== null && this.viewedPromotions !== undefined) {
    output.writeFieldBegin('viewedPromotions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.viewedPromotions.length);
    for (var iter14 in this.viewedPromotions)
    {
      if (this.viewedPromotions.hasOwnProperty(iter14))
      {
        iter14 = this.viewedPromotions[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.incomingEmailAddress !== null && this.incomingEmailAddress !== undefined) {
    output.writeFieldBegin('incomingEmailAddress', Thrift.Type.STRING, 6);
    output.writeString(this.incomingEmailAddress);
    output.writeFieldEnd();
  }
  if (this.recentMailedAddresses !== null && this.recentMailedAddresses !== undefined) {
    output.writeFieldBegin('recentMailedAddresses', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.recentMailedAddresses.length);
    for (var iter15 in this.recentMailedAddresses)
    {
      if (this.recentMailedAddresses.hasOwnProperty(iter15))
      {
        iter15 = this.recentMailedAddresses[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 9);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  if (this.dateAgreedToTermsOfService !== null && this.dateAgreedToTermsOfService !== undefined) {
    output.writeFieldBegin('dateAgreedToTermsOfService', Thrift.Type.I64, 11);
    output.writeI64(this.dateAgreedToTermsOfService);
    output.writeFieldEnd();
  }
  if (this.maxReferrals !== null && this.maxReferrals !== undefined) {
    output.writeFieldBegin('maxReferrals', Thrift.Type.I32, 12);
    output.writeI32(this.maxReferrals);
    output.writeFieldEnd();
  }
  if (this.referralCount !== null && this.referralCount !== undefined) {
    output.writeFieldBegin('referralCount', Thrift.Type.I32, 13);
    output.writeI32(this.referralCount);
    output.writeFieldEnd();
  }
  if (this.refererCode !== null && this.refererCode !== undefined) {
    output.writeFieldBegin('refererCode', Thrift.Type.STRING, 14);
    output.writeString(this.refererCode);
    output.writeFieldEnd();
  }
  if (this.sentEmailDate !== null && this.sentEmailDate !== undefined) {
    output.writeFieldBegin('sentEmailDate', Thrift.Type.I64, 15);
    output.writeI64(this.sentEmailDate);
    output.writeFieldEnd();
  }
  if (this.sentEmailCount !== null && this.sentEmailCount !== undefined) {
    output.writeFieldBegin('sentEmailCount', Thrift.Type.I32, 16);
    output.writeI32(this.sentEmailCount);
    output.writeFieldEnd();
  }
  if (this.dailyEmailLimit !== null && this.dailyEmailLimit !== undefined) {
    output.writeFieldBegin('dailyEmailLimit', Thrift.Type.I32, 17);
    output.writeI32(this.dailyEmailLimit);
    output.writeFieldEnd();
  }
  if (this.emailOptOutDate !== null && this.emailOptOutDate !== undefined) {
    output.writeFieldBegin('emailOptOutDate', Thrift.Type.I64, 18);
    output.writeI64(this.emailOptOutDate);
    output.writeFieldEnd();
  }
  if (this.partnerEmailOptInDate !== null && this.partnerEmailOptInDate !== undefined) {
    output.writeFieldBegin('partnerEmailOptInDate', Thrift.Type.I64, 19);
    output.writeI64(this.partnerEmailOptInDate);
    output.writeFieldEnd();
  }
  if (this.preferredLanguage !== null && this.preferredLanguage !== undefined) {
    output.writeFieldBegin('preferredLanguage', Thrift.Type.STRING, 20);
    output.writeString(this.preferredLanguage);
    output.writeFieldEnd();
  }
  if (this.preferredCountry !== null && this.preferredCountry !== undefined) {
    output.writeFieldBegin('preferredCountry', Thrift.Type.STRING, 21);
    output.writeString(this.preferredCountry);
    output.writeFieldEnd();
  }
  if (this.clipFullPage !== null && this.clipFullPage !== undefined) {
    output.writeFieldBegin('clipFullPage', Thrift.Type.BOOL, 22);
    output.writeBool(this.clipFullPage);
    output.writeFieldEnd();
  }
  if (this.twitterUserName !== null && this.twitterUserName !== undefined) {
    output.writeFieldBegin('twitterUserName', Thrift.Type.STRING, 23);
    output.writeString(this.twitterUserName);
    output.writeFieldEnd();
  }
  if (this.twitterId !== null && this.twitterId !== undefined) {
    output.writeFieldBegin('twitterId', Thrift.Type.STRING, 24);
    output.writeString(this.twitterId);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 25);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.recognitionLanguage !== null && this.recognitionLanguage !== undefined) {
    output.writeFieldBegin('recognitionLanguage', Thrift.Type.STRING, 26);
    output.writeString(this.recognitionLanguage);
    output.writeFieldEnd();
  }
  if (this.referralProof !== null && this.referralProof !== undefined) {
    output.writeFieldBegin('referralProof', Thrift.Type.STRING, 28);
    output.writeString(this.referralProof);
    output.writeFieldEnd();
  }
  if (this.educationalDiscount !== null && this.educationalDiscount !== undefined) {
    output.writeFieldBegin('educationalDiscount', Thrift.Type.BOOL, 29);
    output.writeBool(this.educationalDiscount);
    output.writeFieldEnd();
  }
  if (this.businessAddress !== null && this.businessAddress !== undefined) {
    output.writeFieldBegin('businessAddress', Thrift.Type.STRING, 30);
    output.writeString(this.businessAddress);
    output.writeFieldEnd();
  }
  if (this.hideSponsorBilling !== null && this.hideSponsorBilling !== undefined) {
    output.writeFieldBegin('hideSponsorBilling', Thrift.Type.BOOL, 31);
    output.writeBool(this.hideSponsorBilling);
    output.writeFieldEnd();
  }
  if (this.taxExempt !== null && this.taxExempt !== undefined) {
    output.writeFieldBegin('taxExempt', Thrift.Type.BOOL, 32);
    output.writeBool(this.taxExempt);
    output.writeFieldEnd();
  }
  if (this.useEmailAutoFiling !== null && this.useEmailAutoFiling !== undefined) {
    output.writeFieldBegin('useEmailAutoFiling', Thrift.Type.BOOL, 33);
    output.writeBool(this.useEmailAutoFiling);
    output.writeFieldEnd();
  }
  if (this.reminderEmailConfig !== null && this.reminderEmailConfig !== undefined) {
    output.writeFieldBegin('reminderEmailConfig', Thrift.Type.I32, 34);
    output.writeI32(this.reminderEmailConfig);
    output.writeFieldEnd();
  }
  if (this.emailAddressLastConfirmed !== null && this.emailAddressLastConfirmed !== undefined) {
    output.writeFieldBegin('emailAddressLastConfirmed', Thrift.Type.I64, 35);
    output.writeI64(this.emailAddressLastConfirmed);
    output.writeFieldEnd();
  }
  if (this.passwordUpdated !== null && this.passwordUpdated !== undefined) {
    output.writeFieldBegin('passwordUpdated', Thrift.Type.I64, 36);
    output.writeI64(this.passwordUpdated);
    output.writeFieldEnd();
  }
  if (this.salesforcePushEnabled !== null && this.salesforcePushEnabled !== undefined) {
    output.writeFieldBegin('salesforcePushEnabled', Thrift.Type.BOOL, 37);
    output.writeBool(this.salesforcePushEnabled);
    output.writeFieldEnd();
  }
  if (this.shouldLogClientEvent !== null && this.shouldLogClientEvent !== undefined) {
    output.writeFieldBegin('shouldLogClientEvent', Thrift.Type.BOOL, 38);
    output.writeBool(this.shouldLogClientEvent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessUserAttributes = function(args) {
  this.title = null;
  this.location = null;
  this.department = null;
  this.mobilePhone = null;
  this.linkedInProfileUrl = null;
  this.workPhone = null;
  this.companyStartDate = null;
  if (args) {
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.department !== undefined) {
      this.department = args.department;
    }
    if (args.mobilePhone !== undefined) {
      this.mobilePhone = args.mobilePhone;
    }
    if (args.linkedInProfileUrl !== undefined) {
      this.linkedInProfileUrl = args.linkedInProfileUrl;
    }
    if (args.workPhone !== undefined) {
      this.workPhone = args.workPhone;
    }
    if (args.companyStartDate !== undefined) {
      this.companyStartDate = args.companyStartDate;
    }
  }
};
BusinessUserAttributes.prototype = {};
BusinessUserAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.department = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mobilePhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.linkedInProfileUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.workPhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.companyStartDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessUserAttributes.prototype.write = function(output) {
  output.writeStructBegin('BusinessUserAttributes');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.department !== null && this.department !== undefined) {
    output.writeFieldBegin('department', Thrift.Type.STRING, 3);
    output.writeString(this.department);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRING, 4);
    output.writeString(this.mobilePhone);
    output.writeFieldEnd();
  }
  if (this.linkedInProfileUrl !== null && this.linkedInProfileUrl !== undefined) {
    output.writeFieldBegin('linkedInProfileUrl', Thrift.Type.STRING, 5);
    output.writeString(this.linkedInProfileUrl);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRING, 6);
    output.writeString(this.workPhone);
    output.writeFieldEnd();
  }
  if (this.companyStartDate !== null && this.companyStartDate !== undefined) {
    output.writeFieldBegin('companyStartDate', Thrift.Type.I64, 7);
    output.writeI64(this.companyStartDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Accounting = function(args) {
  this.uploadLimitEnd = null;
  this.uploadLimitNextMonth = null;
  this.premiumServiceStatus = null;
  this.premiumOrderNumber = null;
  this.premiumCommerceService = null;
  this.premiumServiceStart = null;
  this.premiumServiceSKU = null;
  this.lastSuccessfulCharge = null;
  this.lastFailedCharge = null;
  this.lastFailedChargeReason = null;
  this.nextPaymentDue = null;
  this.premiumLockUntil = null;
  this.updated = null;
  this.premiumSubscriptionNumber = null;
  this.lastRequestedCharge = null;
  this.currency = null;
  this.unitPrice = null;
  this.businessId = null;
  this.businessName = null;
  this.businessRole = null;
  this.unitDiscount = null;
  this.nextChargeDate = null;
  this.availablePoints = null;
  if (args) {
    if (args.uploadLimitEnd !== undefined) {
      this.uploadLimitEnd = args.uploadLimitEnd;
    }
    if (args.uploadLimitNextMonth !== undefined) {
      this.uploadLimitNextMonth = args.uploadLimitNextMonth;
    }
    if (args.premiumServiceStatus !== undefined) {
      this.premiumServiceStatus = args.premiumServiceStatus;
    }
    if (args.premiumOrderNumber !== undefined) {
      this.premiumOrderNumber = args.premiumOrderNumber;
    }
    if (args.premiumCommerceService !== undefined) {
      this.premiumCommerceService = args.premiumCommerceService;
    }
    if (args.premiumServiceStart !== undefined) {
      this.premiumServiceStart = args.premiumServiceStart;
    }
    if (args.premiumServiceSKU !== undefined) {
      this.premiumServiceSKU = args.premiumServiceSKU;
    }
    if (args.lastSuccessfulCharge !== undefined) {
      this.lastSuccessfulCharge = args.lastSuccessfulCharge;
    }
    if (args.lastFailedCharge !== undefined) {
      this.lastFailedCharge = args.lastFailedCharge;
    }
    if (args.lastFailedChargeReason !== undefined) {
      this.lastFailedChargeReason = args.lastFailedChargeReason;
    }
    if (args.nextPaymentDue !== undefined) {
      this.nextPaymentDue = args.nextPaymentDue;
    }
    if (args.premiumLockUntil !== undefined) {
      this.premiumLockUntil = args.premiumLockUntil;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.premiumSubscriptionNumber !== undefined) {
      this.premiumSubscriptionNumber = args.premiumSubscriptionNumber;
    }
    if (args.lastRequestedCharge !== undefined) {
      this.lastRequestedCharge = args.lastRequestedCharge;
    }
    if (args.currency !== undefined) {
      this.currency = args.currency;
    }
    if (args.unitPrice !== undefined) {
      this.unitPrice = args.unitPrice;
    }
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
    if (args.businessName !== undefined) {
      this.businessName = args.businessName;
    }
    if (args.businessRole !== undefined) {
      this.businessRole = args.businessRole;
    }
    if (args.unitDiscount !== undefined) {
      this.unitDiscount = args.unitDiscount;
    }
    if (args.nextChargeDate !== undefined) {
      this.nextChargeDate = args.nextChargeDate;
    }
    if (args.availablePoints !== undefined) {
      this.availablePoints = args.availablePoints;
    }
  }
};
Accounting.prototype = {};
Accounting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimitNextMonth = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.premiumServiceStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.premiumOrderNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.premiumCommerceService = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.premiumServiceStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.premiumServiceSKU = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.lastSuccessfulCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.lastFailedCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.lastFailedChargeReason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.nextPaymentDue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.premiumLockUntil = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.premiumSubscriptionNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.lastRequestedCharge = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.unitPrice = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.businessName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.businessRole = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.unitDiscount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I64) {
        this.nextChargeDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.availablePoints = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Accounting.prototype.write = function(output) {
  output.writeStructBegin('Accounting');
  if (this.uploadLimitEnd !== null && this.uploadLimitEnd !== undefined) {
    output.writeFieldBegin('uploadLimitEnd', Thrift.Type.I64, 2);
    output.writeI64(this.uploadLimitEnd);
    output.writeFieldEnd();
  }
  if (this.uploadLimitNextMonth !== null && this.uploadLimitNextMonth !== undefined) {
    output.writeFieldBegin('uploadLimitNextMonth', Thrift.Type.I64, 3);
    output.writeI64(this.uploadLimitNextMonth);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStatus !== null && this.premiumServiceStatus !== undefined) {
    output.writeFieldBegin('premiumServiceStatus', Thrift.Type.I32, 4);
    output.writeI32(this.premiumServiceStatus);
    output.writeFieldEnd();
  }
  if (this.premiumOrderNumber !== null && this.premiumOrderNumber !== undefined) {
    output.writeFieldBegin('premiumOrderNumber', Thrift.Type.STRING, 5);
    output.writeString(this.premiumOrderNumber);
    output.writeFieldEnd();
  }
  if (this.premiumCommerceService !== null && this.premiumCommerceService !== undefined) {
    output.writeFieldBegin('premiumCommerceService', Thrift.Type.STRING, 6);
    output.writeString(this.premiumCommerceService);
    output.writeFieldEnd();
  }
  if (this.premiumServiceStart !== null && this.premiumServiceStart !== undefined) {
    output.writeFieldBegin('premiumServiceStart', Thrift.Type.I64, 7);
    output.writeI64(this.premiumServiceStart);
    output.writeFieldEnd();
  }
  if (this.premiumServiceSKU !== null && this.premiumServiceSKU !== undefined) {
    output.writeFieldBegin('premiumServiceSKU', Thrift.Type.STRING, 8);
    output.writeString(this.premiumServiceSKU);
    output.writeFieldEnd();
  }
  if (this.lastSuccessfulCharge !== null && this.lastSuccessfulCharge !== undefined) {
    output.writeFieldBegin('lastSuccessfulCharge', Thrift.Type.I64, 9);
    output.writeI64(this.lastSuccessfulCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedCharge !== null && this.lastFailedCharge !== undefined) {
    output.writeFieldBegin('lastFailedCharge', Thrift.Type.I64, 10);
    output.writeI64(this.lastFailedCharge);
    output.writeFieldEnd();
  }
  if (this.lastFailedChargeReason !== null && this.lastFailedChargeReason !== undefined) {
    output.writeFieldBegin('lastFailedChargeReason', Thrift.Type.STRING, 11);
    output.writeString(this.lastFailedChargeReason);
    output.writeFieldEnd();
  }
  if (this.nextPaymentDue !== null && this.nextPaymentDue !== undefined) {
    output.writeFieldBegin('nextPaymentDue', Thrift.Type.I64, 12);
    output.writeI64(this.nextPaymentDue);
    output.writeFieldEnd();
  }
  if (this.premiumLockUntil !== null && this.premiumLockUntil !== undefined) {
    output.writeFieldBegin('premiumLockUntil', Thrift.Type.I64, 13);
    output.writeI64(this.premiumLockUntil);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 14);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.premiumSubscriptionNumber !== null && this.premiumSubscriptionNumber !== undefined) {
    output.writeFieldBegin('premiumSubscriptionNumber', Thrift.Type.STRING, 16);
    output.writeString(this.premiumSubscriptionNumber);
    output.writeFieldEnd();
  }
  if (this.lastRequestedCharge !== null && this.lastRequestedCharge !== undefined) {
    output.writeFieldBegin('lastRequestedCharge', Thrift.Type.I64, 17);
    output.writeI64(this.lastRequestedCharge);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 18);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.unitPrice !== null && this.unitPrice !== undefined) {
    output.writeFieldBegin('unitPrice', Thrift.Type.I32, 19);
    output.writeI32(this.unitPrice);
    output.writeFieldEnd();
  }
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 20);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  if (this.businessName !== null && this.businessName !== undefined) {
    output.writeFieldBegin('businessName', Thrift.Type.STRING, 21);
    output.writeString(this.businessName);
    output.writeFieldEnd();
  }
  if (this.businessRole !== null && this.businessRole !== undefined) {
    output.writeFieldBegin('businessRole', Thrift.Type.I32, 22);
    output.writeI32(this.businessRole);
    output.writeFieldEnd();
  }
  if (this.unitDiscount !== null && this.unitDiscount !== undefined) {
    output.writeFieldBegin('unitDiscount', Thrift.Type.I32, 23);
    output.writeI32(this.unitDiscount);
    output.writeFieldEnd();
  }
  if (this.nextChargeDate !== null && this.nextChargeDate !== undefined) {
    output.writeFieldBegin('nextChargeDate', Thrift.Type.I64, 24);
    output.writeI64(this.nextChargeDate);
    output.writeFieldEnd();
  }
  if (this.availablePoints !== null && this.availablePoints !== undefined) {
    output.writeFieldBegin('availablePoints', Thrift.Type.I32, 25);
    output.writeI32(this.availablePoints);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessUserInfo = function(args) {
  this.businessId = null;
  this.businessName = null;
  this.role = null;
  this.email = null;
  this.updated = null;
  if (args) {
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
    if (args.businessName !== undefined) {
      this.businessName = args.businessName;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
  }
};
BusinessUserInfo.prototype = {};
BusinessUserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.businessName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessUserInfo.prototype.write = function(output) {
  output.writeStructBegin('BusinessUserInfo');
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 1);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  if (this.businessName !== null && this.businessName !== undefined) {
    output.writeFieldBegin('businessName', Thrift.Type.STRING, 2);
    output.writeString(this.businessName);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 3);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 5);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountLimits = function(args) {
  this.userMailLimitDaily = null;
  this.noteSizeMax = null;
  this.resourceSizeMax = null;
  this.userLinkedNotebookMax = null;
  this.uploadLimit = null;
  this.userNoteCountMax = null;
  this.userNotebookCountMax = null;
  this.userTagCountMax = null;
  this.noteTagCountMax = null;
  this.userSavedSearchesMax = null;
  this.noteResourceCountMax = null;
  if (args) {
    if (args.userMailLimitDaily !== undefined) {
      this.userMailLimitDaily = args.userMailLimitDaily;
    }
    if (args.noteSizeMax !== undefined) {
      this.noteSizeMax = args.noteSizeMax;
    }
    if (args.resourceSizeMax !== undefined) {
      this.resourceSizeMax = args.resourceSizeMax;
    }
    if (args.userLinkedNotebookMax !== undefined) {
      this.userLinkedNotebookMax = args.userLinkedNotebookMax;
    }
    if (args.uploadLimit !== undefined) {
      this.uploadLimit = args.uploadLimit;
    }
    if (args.userNoteCountMax !== undefined) {
      this.userNoteCountMax = args.userNoteCountMax;
    }
    if (args.userNotebookCountMax !== undefined) {
      this.userNotebookCountMax = args.userNotebookCountMax;
    }
    if (args.userTagCountMax !== undefined) {
      this.userTagCountMax = args.userTagCountMax;
    }
    if (args.noteTagCountMax !== undefined) {
      this.noteTagCountMax = args.noteTagCountMax;
    }
    if (args.userSavedSearchesMax !== undefined) {
      this.userSavedSearchesMax = args.userSavedSearchesMax;
    }
    if (args.noteResourceCountMax !== undefined) {
      this.noteResourceCountMax = args.noteResourceCountMax;
    }
  }
};
AccountLimits.prototype = {};
AccountLimits.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userMailLimitDaily = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.noteSizeMax = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.resourceSizeMax = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.userLinkedNotebookMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.userNoteCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.userNotebookCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.userTagCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.noteTagCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.userSavedSearchesMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.noteResourceCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountLimits.prototype.write = function(output) {
  output.writeStructBegin('AccountLimits');
  if (this.userMailLimitDaily !== null && this.userMailLimitDaily !== undefined) {
    output.writeFieldBegin('userMailLimitDaily', Thrift.Type.I32, 1);
    output.writeI32(this.userMailLimitDaily);
    output.writeFieldEnd();
  }
  if (this.noteSizeMax !== null && this.noteSizeMax !== undefined) {
    output.writeFieldBegin('noteSizeMax', Thrift.Type.I64, 2);
    output.writeI64(this.noteSizeMax);
    output.writeFieldEnd();
  }
  if (this.resourceSizeMax !== null && this.resourceSizeMax !== undefined) {
    output.writeFieldBegin('resourceSizeMax', Thrift.Type.I64, 3);
    output.writeI64(this.resourceSizeMax);
    output.writeFieldEnd();
  }
  if (this.userLinkedNotebookMax !== null && this.userLinkedNotebookMax !== undefined) {
    output.writeFieldBegin('userLinkedNotebookMax', Thrift.Type.I32, 4);
    output.writeI32(this.userLinkedNotebookMax);
    output.writeFieldEnd();
  }
  if (this.uploadLimit !== null && this.uploadLimit !== undefined) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 5);
    output.writeI64(this.uploadLimit);
    output.writeFieldEnd();
  }
  if (this.userNoteCountMax !== null && this.userNoteCountMax !== undefined) {
    output.writeFieldBegin('userNoteCountMax', Thrift.Type.I32, 6);
    output.writeI32(this.userNoteCountMax);
    output.writeFieldEnd();
  }
  if (this.userNotebookCountMax !== null && this.userNotebookCountMax !== undefined) {
    output.writeFieldBegin('userNotebookCountMax', Thrift.Type.I32, 7);
    output.writeI32(this.userNotebookCountMax);
    output.writeFieldEnd();
  }
  if (this.userTagCountMax !== null && this.userTagCountMax !== undefined) {
    output.writeFieldBegin('userTagCountMax', Thrift.Type.I32, 8);
    output.writeI32(this.userTagCountMax);
    output.writeFieldEnd();
  }
  if (this.noteTagCountMax !== null && this.noteTagCountMax !== undefined) {
    output.writeFieldBegin('noteTagCountMax', Thrift.Type.I32, 9);
    output.writeI32(this.noteTagCountMax);
    output.writeFieldEnd();
  }
  if (this.userSavedSearchesMax !== null && this.userSavedSearchesMax !== undefined) {
    output.writeFieldBegin('userSavedSearchesMax', Thrift.Type.I32, 10);
    output.writeI32(this.userSavedSearchesMax);
    output.writeFieldEnd();
  }
  if (this.noteResourceCountMax !== null && this.noteResourceCountMax !== undefined) {
    output.writeFieldBegin('noteResourceCountMax', Thrift.Type.I32, 11);
    output.writeI32(this.noteResourceCountMax);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PremiumInfo = function(args) {
  this.currentTime = null;
  this.premium = null;
  this.premiumRecurring = null;
  this.premiumExpirationDate = null;
  this.premiumExtendable = null;
  this.premiumPending = null;
  this.premiumCancellationPending = null;
  this.canPurchaseUploadAllowance = null;
  this.premiumUpgradable = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.premium !== undefined) {
      this.premium = args.premium;
    }
    if (args.premiumRecurring !== undefined) {
      this.premiumRecurring = args.premiumRecurring;
    }
    if (args.premiumExpirationDate !== undefined) {
      this.premiumExpirationDate = args.premiumExpirationDate;
    }
    if (args.premiumExtendable !== undefined) {
      this.premiumExtendable = args.premiumExtendable;
    }
    if (args.premiumPending !== undefined) {
      this.premiumPending = args.premiumPending;
    }
    if (args.premiumCancellationPending !== undefined) {
      this.premiumCancellationPending = args.premiumCancellationPending;
    }
    if (args.canPurchaseUploadAllowance !== undefined) {
      this.canPurchaseUploadAllowance = args.canPurchaseUploadAllowance;
    }
    if (args.premiumUpgradable !== undefined) {
      this.premiumUpgradable = args.premiumUpgradable;
    }
  }
};
PremiumInfo.prototype = {};
PremiumInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.premium = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumRecurring = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.premiumExpirationDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumExtendable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumPending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumCancellationPending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.canPurchaseUploadAllowance = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.premiumUpgradable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PremiumInfo.prototype.write = function(output) {
  output.writeStructBegin('PremiumInfo');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.premium !== null && this.premium !== undefined) {
    output.writeFieldBegin('premium', Thrift.Type.BOOL, 2);
    output.writeBool(this.premium);
    output.writeFieldEnd();
  }
  if (this.premiumRecurring !== null && this.premiumRecurring !== undefined) {
    output.writeFieldBegin('premiumRecurring', Thrift.Type.BOOL, 3);
    output.writeBool(this.premiumRecurring);
    output.writeFieldEnd();
  }
  if (this.premiumExpirationDate !== null && this.premiumExpirationDate !== undefined) {
    output.writeFieldBegin('premiumExpirationDate', Thrift.Type.I64, 4);
    output.writeI64(this.premiumExpirationDate);
    output.writeFieldEnd();
  }
  if (this.premiumExtendable !== null && this.premiumExtendable !== undefined) {
    output.writeFieldBegin('premiumExtendable', Thrift.Type.BOOL, 5);
    output.writeBool(this.premiumExtendable);
    output.writeFieldEnd();
  }
  if (this.premiumPending !== null && this.premiumPending !== undefined) {
    output.writeFieldBegin('premiumPending', Thrift.Type.BOOL, 6);
    output.writeBool(this.premiumPending);
    output.writeFieldEnd();
  }
  if (this.premiumCancellationPending !== null && this.premiumCancellationPending !== undefined) {
    output.writeFieldBegin('premiumCancellationPending', Thrift.Type.BOOL, 7);
    output.writeBool(this.premiumCancellationPending);
    output.writeFieldEnd();
  }
  if (this.canPurchaseUploadAllowance !== null && this.canPurchaseUploadAllowance !== undefined) {
    output.writeFieldBegin('canPurchaseUploadAllowance', Thrift.Type.BOOL, 8);
    output.writeBool(this.canPurchaseUploadAllowance);
    output.writeFieldEnd();
  }
  if (this.premiumUpgradable !== null && this.premiumUpgradable !== undefined) {
    output.writeFieldBegin('premiumUpgradable', Thrift.Type.BOOL, 11);
    output.writeBool(this.premiumUpgradable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = function(args) {
  this.id = null;
  this.username = null;
  this.email = null;
  this.name = null;
  this.timezone = null;
  this.privilege = null;
  this.serviceLevel = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.shardId = null;
  this.attributes = null;
  this.accounting = null;
  this.businessUserInfo = null;
  this.photoUrl = null;
  this.photoLastUpdated = null;
  this.accountLimits = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.timezone !== undefined) {
      this.timezone = args.timezone;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.serviceLevel !== undefined) {
      this.serviceLevel = args.serviceLevel;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.accounting !== undefined) {
      this.accounting = args.accounting;
    }
    if (args.businessUserInfo !== undefined) {
      this.businessUserInfo = args.businessUserInfo;
    }
    if (args.photoUrl !== undefined) {
      this.photoUrl = args.photoUrl;
    }
    if (args.photoLastUpdated !== undefined) {
      this.photoLastUpdated = args.photoLastUpdated;
    }
    if (args.accountLimits !== undefined) {
      this.accountLimits = args.accountLimits;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.serviceLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new UserAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.accounting = new Accounting();
        this.accounting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.businessUserInfo = new BusinessUserInfo();
        this.businessUserInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.photoUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.photoLastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.accountLimits = new AccountLimits();
        this.accountLimits.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 7);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.serviceLevel !== null && this.serviceLevel !== undefined) {
    output.writeFieldBegin('serviceLevel', Thrift.Type.I32, 21);
    output.writeI32(this.serviceLevel);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 9);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 10);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 13);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 14);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.accounting !== null && this.accounting !== undefined) {
    output.writeFieldBegin('accounting', Thrift.Type.STRUCT, 16);
    this.accounting.write(output);
    output.writeFieldEnd();
  }
  if (this.businessUserInfo !== null && this.businessUserInfo !== undefined) {
    output.writeFieldBegin('businessUserInfo', Thrift.Type.STRUCT, 18);
    this.businessUserInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.photoUrl !== null && this.photoUrl !== undefined) {
    output.writeFieldBegin('photoUrl', Thrift.Type.STRING, 19);
    output.writeString(this.photoUrl);
    output.writeFieldEnd();
  }
  if (this.photoLastUpdated !== null && this.photoLastUpdated !== undefined) {
    output.writeFieldBegin('photoLastUpdated', Thrift.Type.I64, 20);
    output.writeI64(this.photoLastUpdated);
    output.writeFieldEnd();
  }
  if (this.accountLimits !== null && this.accountLimits !== undefined) {
    output.writeFieldBegin('accountLimits', Thrift.Type.STRUCT, 22);
    this.accountLimits.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Contact = function(args) {
  this.name = null;
  this.id = null;
  this.type = null;
  this.photoUrl = null;
  this.photoLastUpdated = null;
  this.messagingPermit = null;
  this.messagingPermitExpires = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.photoUrl !== undefined) {
      this.photoUrl = args.photoUrl;
    }
    if (args.photoLastUpdated !== undefined) {
      this.photoLastUpdated = args.photoLastUpdated;
    }
    if (args.messagingPermit !== undefined) {
      this.messagingPermit = args.messagingPermit;
    }
    if (args.messagingPermitExpires !== undefined) {
      this.messagingPermitExpires = args.messagingPermitExpires;
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.photoUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.photoLastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.messagingPermit = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.messagingPermitExpires = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.photoUrl !== null && this.photoUrl !== undefined) {
    output.writeFieldBegin('photoUrl', Thrift.Type.STRING, 4);
    output.writeString(this.photoUrl);
    output.writeFieldEnd();
  }
  if (this.photoLastUpdated !== null && this.photoLastUpdated !== undefined) {
    output.writeFieldBegin('photoLastUpdated', Thrift.Type.I64, 5);
    output.writeI64(this.photoLastUpdated);
    output.writeFieldEnd();
  }
  if (this.messagingPermit !== null && this.messagingPermit !== undefined) {
    output.writeFieldBegin('messagingPermit', Thrift.Type.STRING, 6);
    output.writeBinary(this.messagingPermit);
    output.writeFieldEnd();
  }
  if (this.messagingPermitExpires !== null && this.messagingPermitExpires !== undefined) {
    output.writeFieldBegin('messagingPermitExpires', Thrift.Type.I64, 7);
    output.writeI64(this.messagingPermitExpires);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Identity = function(args) {
  this.id = null;
  this.contact = null;
  this.userId = null;
  this.deactivated = null;
  this.sameBusiness = null;
  this.blocked = null;
  this.userConnected = null;
  this.eventId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.contact !== undefined) {
      this.contact = args.contact;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.deactivated !== undefined) {
      this.deactivated = args.deactivated;
    }
    if (args.sameBusiness !== undefined) {
      this.sameBusiness = args.sameBusiness;
    }
    if (args.blocked !== undefined) {
      this.blocked = args.blocked;
    }
    if (args.userConnected !== undefined) {
      this.userConnected = args.userConnected;
    }
    if (args.eventId !== undefined) {
      this.eventId = args.eventId;
    }
  }
};
Identity.prototype = {};
Identity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deactivated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sameBusiness = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.blocked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.userConnected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.eventId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Identity.prototype.write = function(output) {
  output.writeStructBegin('Identity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 2);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 3);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.deactivated !== null && this.deactivated !== undefined) {
    output.writeFieldBegin('deactivated', Thrift.Type.BOOL, 4);
    output.writeBool(this.deactivated);
    output.writeFieldEnd();
  }
  if (this.sameBusiness !== null && this.sameBusiness !== undefined) {
    output.writeFieldBegin('sameBusiness', Thrift.Type.BOOL, 5);
    output.writeBool(this.sameBusiness);
    output.writeFieldEnd();
  }
  if (this.blocked !== null && this.blocked !== undefined) {
    output.writeFieldBegin('blocked', Thrift.Type.BOOL, 6);
    output.writeBool(this.blocked);
    output.writeFieldEnd();
  }
  if (this.userConnected !== null && this.userConnected !== undefined) {
    output.writeFieldBegin('userConnected', Thrift.Type.BOOL, 7);
    output.writeBool(this.userConnected);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I64, 8);
    output.writeI64(this.eventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = function(args) {
  this.guid = null;
  this.name = null;
  this.parentGuid = null;
  this.updateSequenceNum = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.parentGuid !== undefined) {
      this.parentGuid = args.parentGuid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parentGuid !== null && this.parentGuid !== undefined) {
    output.writeFieldBegin('parentGuid', Thrift.Type.STRING, 3);
    output.writeString(this.parentGuid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 4);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LazyMap = function(args) {
  this.keysOnly = null;
  this.fullMap = null;
  if (args) {
    if (args.keysOnly !== undefined) {
      this.keysOnly = args.keysOnly;
    }
    if (args.fullMap !== undefined) {
      this.fullMap = args.fullMap;
    }
  }
};
LazyMap.prototype = {};
LazyMap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.keysOnly = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.keysOnly.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.fullMap = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          if (_i28 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key29 = null;
          var val30 = null;
          key29 = input.readString().value;
          val30 = input.readString().value;
          this.fullMap[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LazyMap.prototype.write = function(output) {
  output.writeStructBegin('LazyMap');
  if (this.keysOnly !== null && this.keysOnly !== undefined) {
    output.writeFieldBegin('keysOnly', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.keysOnly.length);
    for (var iter31 in this.keysOnly)
    {
      if (this.keysOnly.hasOwnProperty(iter31))
      {
        iter31 = this.keysOnly[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.fullMap !== null && this.fullMap !== undefined) {
    output.writeFieldBegin('fullMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fullMap));
    for (var kiter32 in this.fullMap)
    {
      if (this.fullMap.hasOwnProperty(kiter32))
      {
        var viter33 = this.fullMap[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceAttributes = function(args) {
  this.sourceURL = null;
  this.timestamp = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.cameraMake = null;
  this.cameraModel = null;
  this.clientWillIndex = null;
  this.recoType = null;
  this.fileName = null;
  this.attachment = null;
  this.applicationData = null;
  if (args) {
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.cameraMake !== undefined) {
      this.cameraMake = args.cameraMake;
    }
    if (args.cameraModel !== undefined) {
      this.cameraModel = args.cameraModel;
    }
    if (args.clientWillIndex !== undefined) {
      this.clientWillIndex = args.clientWillIndex;
    }
    if (args.recoType !== undefined) {
      this.recoType = args.recoType;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.attachment !== undefined) {
      this.attachment = args.attachment;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
  }
};
ResourceAttributes.prototype = {};
ResourceAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cameraMake = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cameraModel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.clientWillIndex = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.recoType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.attachment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceAttributes.prototype.write = function(output) {
  output.writeStructBegin('ResourceAttributes');
  if (this.sourceURL !== null && this.sourceURL !== undefined) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 1);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.cameraMake !== null && this.cameraMake !== undefined) {
    output.writeFieldBegin('cameraMake', Thrift.Type.STRING, 6);
    output.writeString(this.cameraMake);
    output.writeFieldEnd();
  }
  if (this.cameraModel !== null && this.cameraModel !== undefined) {
    output.writeFieldBegin('cameraModel', Thrift.Type.STRING, 7);
    output.writeString(this.cameraModel);
    output.writeFieldEnd();
  }
  if (this.clientWillIndex !== null && this.clientWillIndex !== undefined) {
    output.writeFieldBegin('clientWillIndex', Thrift.Type.BOOL, 8);
    output.writeBool(this.clientWillIndex);
    output.writeFieldEnd();
  }
  if (this.recoType !== null && this.recoType !== undefined) {
    output.writeFieldBegin('recoType', Thrift.Type.STRING, 9);
    output.writeString(this.recoType);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 10);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.attachment !== null && this.attachment !== undefined) {
    output.writeFieldBegin('attachment', Thrift.Type.BOOL, 11);
    output.writeBool(this.attachment);
    output.writeFieldEnd();
  }
  if (this.applicationData !== null && this.applicationData !== undefined) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 12);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = function(args) {
  this.guid = null;
  this.noteGuid = null;
  this.data = null;
  this.mime = null;
  this.width = null;
  this.height = null;
  this.duration = null;
  this.active = null;
  this.recognition = null;
  this.attributes = null;
  this.updateSequenceNum = null;
  this.alternateData = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.mime !== undefined) {
      this.mime = args.mime;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.recognition !== undefined) {
      this.recognition = args.recognition;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.alternateData !== undefined) {
      this.alternateData = args.alternateData;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new Data();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.duration = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.recognition = new Data();
        this.recognition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ResourceAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.alternateData = new Data();
        this.alternateData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.mime !== null && this.mime !== undefined) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 4);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I16, 5);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I16, 6);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I16, 7);
    output.writeI16(this.duration);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 8);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.recognition !== null && this.recognition !== undefined) {
    output.writeFieldBegin('recognition', Thrift.Type.STRUCT, 9);
    this.recognition.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 11);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 12);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.alternateData !== null && this.alternateData !== undefined) {
    output.writeFieldBegin('alternateData', Thrift.Type.STRUCT, 13);
    this.alternateData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteAttributes = function(args) {
  this.subjectDate = null;
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.author = null;
  this.source = null;
  this.sourceURL = null;
  this.sourceApplication = null;
  this.shareDate = null;
  this.reminderOrder = null;
  this.reminderDoneTime = null;
  this.reminderTime = null;
  this.placeName = null;
  this.contentClass = null;
  this.applicationData = null;
  this.lastEditedBy = null;
  this.classifications = null;
  this.creatorId = null;
  this.lastEditorId = null;
  this.sharedWithBusiness = null;
  this.conflictSourceNoteGuid = null;
  this.noteTitleQuality = null;
  if (args) {
    if (args.subjectDate !== undefined) {
      this.subjectDate = args.subjectDate;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.sourceURL !== undefined) {
      this.sourceURL = args.sourceURL;
    }
    if (args.sourceApplication !== undefined) {
      this.sourceApplication = args.sourceApplication;
    }
    if (args.shareDate !== undefined) {
      this.shareDate = args.shareDate;
    }
    if (args.reminderOrder !== undefined) {
      this.reminderOrder = args.reminderOrder;
    }
    if (args.reminderDoneTime !== undefined) {
      this.reminderDoneTime = args.reminderDoneTime;
    }
    if (args.reminderTime !== undefined) {
      this.reminderTime = args.reminderTime;
    }
    if (args.placeName !== undefined) {
      this.placeName = args.placeName;
    }
    if (args.contentClass !== undefined) {
      this.contentClass = args.contentClass;
    }
    if (args.applicationData !== undefined) {
      this.applicationData = args.applicationData;
    }
    if (args.lastEditedBy !== undefined) {
      this.lastEditedBy = args.lastEditedBy;
    }
    if (args.classifications !== undefined) {
      this.classifications = args.classifications;
    }
    if (args.creatorId !== undefined) {
      this.creatorId = args.creatorId;
    }
    if (args.lastEditorId !== undefined) {
      this.lastEditorId = args.lastEditorId;
    }
    if (args.sharedWithBusiness !== undefined) {
      this.sharedWithBusiness = args.sharedWithBusiness;
    }
    if (args.conflictSourceNoteGuid !== undefined) {
      this.conflictSourceNoteGuid = args.conflictSourceNoteGuid;
    }
    if (args.noteTitleQuality !== undefined) {
      this.noteTitleQuality = args.noteTitleQuality;
    }
  }
};
NoteAttributes.prototype = {};
NoteAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subjectDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.sourceApplication = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.shareDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.reminderOrder = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.reminderDoneTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.reminderTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.placeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.contentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.applicationData = new LazyMap();
        this.applicationData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.lastEditedBy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.classifications = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          if (_i39 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key40 = null;
          var val41 = null;
          key40 = input.readString().value;
          val41 = input.readString().value;
          this.classifications[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I32) {
        this.creatorId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I32) {
        this.lastEditorId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.sharedWithBusiness = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.conflictSourceNoteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.noteTitleQuality = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteAttributes.prototype.write = function(output) {
  output.writeStructBegin('NoteAttributes');
  if (this.subjectDate !== null && this.subjectDate !== undefined) {
    output.writeFieldBegin('subjectDate', Thrift.Type.I64, 1);
    output.writeI64(this.subjectDate);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 13);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 14);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.sourceURL !== null && this.sourceURL !== undefined) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 15);
    output.writeString(this.sourceURL);
    output.writeFieldEnd();
  }
  if (this.sourceApplication !== null && this.sourceApplication !== undefined) {
    output.writeFieldBegin('sourceApplication', Thrift.Type.STRING, 16);
    output.writeString(this.sourceApplication);
    output.writeFieldEnd();
  }
  if (this.shareDate !== null && this.shareDate !== undefined) {
    output.writeFieldBegin('shareDate', Thrift.Type.I64, 17);
    output.writeI64(this.shareDate);
    output.writeFieldEnd();
  }
  if (this.reminderOrder !== null && this.reminderOrder !== undefined) {
    output.writeFieldBegin('reminderOrder', Thrift.Type.I64, 18);
    output.writeI64(this.reminderOrder);
    output.writeFieldEnd();
  }
  if (this.reminderDoneTime !== null && this.reminderDoneTime !== undefined) {
    output.writeFieldBegin('reminderDoneTime', Thrift.Type.I64, 19);
    output.writeI64(this.reminderDoneTime);
    output.writeFieldEnd();
  }
  if (this.reminderTime !== null && this.reminderTime !== undefined) {
    output.writeFieldBegin('reminderTime', Thrift.Type.I64, 20);
    output.writeI64(this.reminderTime);
    output.writeFieldEnd();
  }
  if (this.placeName !== null && this.placeName !== undefined) {
    output.writeFieldBegin('placeName', Thrift.Type.STRING, 21);
    output.writeString(this.placeName);
    output.writeFieldEnd();
  }
  if (this.contentClass !== null && this.contentClass !== undefined) {
    output.writeFieldBegin('contentClass', Thrift.Type.STRING, 22);
    output.writeString(this.contentClass);
    output.writeFieldEnd();
  }
  if (this.applicationData !== null && this.applicationData !== undefined) {
    output.writeFieldBegin('applicationData', Thrift.Type.STRUCT, 23);
    this.applicationData.write(output);
    output.writeFieldEnd();
  }
  if (this.lastEditedBy !== null && this.lastEditedBy !== undefined) {
    output.writeFieldBegin('lastEditedBy', Thrift.Type.STRING, 24);
    output.writeString(this.lastEditedBy);
    output.writeFieldEnd();
  }
  if (this.classifications !== null && this.classifications !== undefined) {
    output.writeFieldBegin('classifications', Thrift.Type.MAP, 26);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.classifications));
    for (var kiter42 in this.classifications)
    {
      if (this.classifications.hasOwnProperty(kiter42))
      {
        var viter43 = this.classifications[kiter42];
        output.writeString(kiter42);
        output.writeString(viter43);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.I32, 27);
    output.writeI32(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.lastEditorId !== null && this.lastEditorId !== undefined) {
    output.writeFieldBegin('lastEditorId', Thrift.Type.I32, 28);
    output.writeI32(this.lastEditorId);
    output.writeFieldEnd();
  }
  if (this.sharedWithBusiness !== null && this.sharedWithBusiness !== undefined) {
    output.writeFieldBegin('sharedWithBusiness', Thrift.Type.BOOL, 29);
    output.writeBool(this.sharedWithBusiness);
    output.writeFieldEnd();
  }
  if (this.conflictSourceNoteGuid !== null && this.conflictSourceNoteGuid !== undefined) {
    output.writeFieldBegin('conflictSourceNoteGuid', Thrift.Type.STRING, 30);
    output.writeString(this.conflictSourceNoteGuid);
    output.writeFieldEnd();
  }
  if (this.noteTitleQuality !== null && this.noteTitleQuality !== undefined) {
    output.writeFieldBegin('noteTitleQuality', Thrift.Type.I32, 31);
    output.writeI32(this.noteTitleQuality);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNote = function(args) {
  this.sharerUserID = null;
  this.recipientIdentity = null;
  this.privilege = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.serviceAssigned = null;
  if (args) {
    if (args.sharerUserID !== undefined) {
      this.sharerUserID = args.sharerUserID;
    }
    if (args.recipientIdentity !== undefined) {
      this.recipientIdentity = args.recipientIdentity;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.serviceAssigned !== undefined) {
      this.serviceAssigned = args.serviceAssigned;
    }
  }
};
SharedNote.prototype = {};
SharedNote.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientIdentity = new Identity();
        this.recipientIdentity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.serviceAssigned = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNote.prototype.write = function(output) {
  output.writeStructBegin('SharedNote');
  if (this.sharerUserID !== null && this.sharerUserID !== undefined) {
    output.writeFieldBegin('sharerUserID', Thrift.Type.I32, 1);
    output.writeI32(this.sharerUserID);
    output.writeFieldEnd();
  }
  if (this.recipientIdentity !== null && this.recipientIdentity !== undefined) {
    output.writeFieldBegin('recipientIdentity', Thrift.Type.STRUCT, 2);
    this.recipientIdentity.write(output);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.serviceCreated !== null && this.serviceCreated !== undefined) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 4);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated !== null && this.serviceUpdated !== undefined) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 5);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.serviceAssigned !== null && this.serviceAssigned !== undefined) {
    output.writeFieldBegin('serviceAssigned', Thrift.Type.I64, 6);
    output.writeI64(this.serviceAssigned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteRestrictions = function(args) {
  this.noUpdateTitle = null;
  this.noUpdateContent = null;
  this.noEmail = null;
  this.noShare = null;
  this.noSharePublicly = null;
  if (args) {
    if (args.noUpdateTitle !== undefined) {
      this.noUpdateTitle = args.noUpdateTitle;
    }
    if (args.noUpdateContent !== undefined) {
      this.noUpdateContent = args.noUpdateContent;
    }
    if (args.noEmail !== undefined) {
      this.noEmail = args.noEmail;
    }
    if (args.noShare !== undefined) {
      this.noShare = args.noShare;
    }
    if (args.noSharePublicly !== undefined) {
      this.noSharePublicly = args.noSharePublicly;
    }
  }
};
NoteRestrictions.prototype = {};
NoteRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateTitle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noShare = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.noSharePublicly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteRestrictions.prototype.write = function(output) {
  output.writeStructBegin('NoteRestrictions');
  if (this.noUpdateTitle !== null && this.noUpdateTitle !== undefined) {
    output.writeFieldBegin('noUpdateTitle', Thrift.Type.BOOL, 1);
    output.writeBool(this.noUpdateTitle);
    output.writeFieldEnd();
  }
  if (this.noUpdateContent !== null && this.noUpdateContent !== undefined) {
    output.writeFieldBegin('noUpdateContent', Thrift.Type.BOOL, 2);
    output.writeBool(this.noUpdateContent);
    output.writeFieldEnd();
  }
  if (this.noEmail !== null && this.noEmail !== undefined) {
    output.writeFieldBegin('noEmail', Thrift.Type.BOOL, 3);
    output.writeBool(this.noEmail);
    output.writeFieldEnd();
  }
  if (this.noShare !== null && this.noShare !== undefined) {
    output.writeFieldBegin('noShare', Thrift.Type.BOOL, 4);
    output.writeBool(this.noShare);
    output.writeFieldEnd();
  }
  if (this.noSharePublicly !== null && this.noSharePublicly !== undefined) {
    output.writeFieldBegin('noSharePublicly', Thrift.Type.BOOL, 5);
    output.writeBool(this.noSharePublicly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteLimits = function(args) {
  this.noteResourceCountMax = null;
  this.uploadLimit = null;
  this.resourceSizeMax = null;
  this.noteSizeMax = null;
  this.uploaded = null;
  if (args) {
    if (args.noteResourceCountMax !== undefined) {
      this.noteResourceCountMax = args.noteResourceCountMax;
    }
    if (args.uploadLimit !== undefined) {
      this.uploadLimit = args.uploadLimit;
    }
    if (args.resourceSizeMax !== undefined) {
      this.resourceSizeMax = args.resourceSizeMax;
    }
    if (args.noteSizeMax !== undefined) {
      this.noteSizeMax = args.noteSizeMax;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
  }
};
NoteLimits.prototype = {};
NoteLimits.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.noteResourceCountMax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.resourceSizeMax = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.noteSizeMax = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteLimits.prototype.write = function(output) {
  output.writeStructBegin('NoteLimits');
  if (this.noteResourceCountMax !== null && this.noteResourceCountMax !== undefined) {
    output.writeFieldBegin('noteResourceCountMax', Thrift.Type.I32, 1);
    output.writeI32(this.noteResourceCountMax);
    output.writeFieldEnd();
  }
  if (this.uploadLimit !== null && this.uploadLimit !== undefined) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 2);
    output.writeI64(this.uploadLimit);
    output.writeFieldEnd();
  }
  if (this.resourceSizeMax !== null && this.resourceSizeMax !== undefined) {
    output.writeFieldBegin('resourceSizeMax', Thrift.Type.I64, 3);
    output.writeI64(this.resourceSizeMax);
    output.writeFieldEnd();
  }
  if (this.noteSizeMax !== null && this.noteSizeMax !== undefined) {
    output.writeFieldBegin('noteSizeMax', Thrift.Type.I64, 4);
    output.writeI64(this.noteSizeMax);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 5);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Note = function(args) {
  this.guid = null;
  this.title = null;
  this.content = null;
  this.contentHash = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.active = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.resources = null;
  this.attributes = null;
  this.tagNames = null;
  this.sharedNotes = null;
  this.restrictions = null;
  this.limits = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.contentHash !== undefined) {
      this.contentHash = args.contentHash;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.active !== undefined) {
      this.active = args.active;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.tagNames !== undefined) {
      this.tagNames = args.tagNames;
    }
    if (args.sharedNotes !== undefined) {
      this.sharedNotes = args.sharedNotes;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
    if (args.limits !== undefined) {
      this.limits = args.limits;
    }
  }
};
Note.prototype = {};
Note.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.tagGuids = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readString().value;
          this.tagGuids.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size51 = 0;
        var _rtmp355;
        this.resources = [];
        var _etype54 = 0;
        _rtmp355 = input.readListBegin();
        _etype54 = _rtmp355.etype;
        _size51 = _rtmp355.size;
        for (var _i56 = 0; _i56 < _size51; ++_i56)
        {
          var elem57 = null;
          elem57 = new Resource();
          elem57.read(input);
          this.resources.push(elem57);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.tagNames = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString().value;
          this.tagNames.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size65 = 0;
        var _rtmp369;
        this.sharedNotes = [];
        var _etype68 = 0;
        _rtmp369 = input.readListBegin();
        _etype68 = _rtmp369.etype;
        _size65 = _rtmp369.size;
        for (var _i70 = 0; _i70 < _size65; ++_i70)
        {
          var elem71 = null;
          elem71 = new SharedNote();
          elem71.read(input);
          this.sharedNotes.push(elem71);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new NoteRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.limits = new NoteLimits();
        this.limits.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Note.prototype.write = function(output) {
  output.writeStructBegin('Note');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.contentHash !== null && this.contentHash !== undefined) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 4);
    output.writeBinary(this.contentHash);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 9);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter72 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter72))
      {
        iter72 = this.tagGuids[iter72];
        output.writeString(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter73 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter73))
      {
        iter73 = this.resources[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.tagNames !== null && this.tagNames !== undefined) {
    output.writeFieldBegin('tagNames', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.tagNames.length);
    for (var iter74 in this.tagNames)
    {
      if (this.tagNames.hasOwnProperty(iter74))
      {
        iter74 = this.tagNames[iter74];
        output.writeString(iter74);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharedNotes !== null && this.sharedNotes !== undefined) {
    output.writeFieldBegin('sharedNotes', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRUCT, this.sharedNotes.length);
    for (var iter75 in this.sharedNotes)
    {
      if (this.sharedNotes.hasOwnProperty(iter75))
      {
        iter75 = this.sharedNotes[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 17);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  if (this.limits !== null && this.limits !== undefined) {
    output.writeFieldBegin('limits', Thrift.Type.STRUCT, 18);
    this.limits.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Publishing = function(args) {
  this.uri = null;
  this.order = null;
  this.ascending = null;
  this.publicDescription = null;
  if (args) {
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.publicDescription !== undefined) {
      this.publicDescription = args.publicDescription;
    }
  }
};
Publishing.prototype = {};
Publishing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.publicDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Publishing.prototype.write = function(output) {
  output.writeStructBegin('Publishing');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 3);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.publicDescription !== null && this.publicDescription !== undefined) {
    output.writeFieldBegin('publicDescription', Thrift.Type.STRING, 4);
    output.writeString(this.publicDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessNotebook = function(args) {
  this.notebookDescription = null;
  this.privilege = null;
  this.recommended = null;
  if (args) {
    if (args.notebookDescription !== undefined) {
      this.notebookDescription = args.notebookDescription;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.recommended !== undefined) {
      this.recommended = args.recommended;
    }
  }
};
BusinessNotebook.prototype = {};
BusinessNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommended = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessNotebook.prototype.write = function(output) {
  output.writeStructBegin('BusinessNotebook');
  if (this.notebookDescription !== null && this.notebookDescription !== undefined) {
    output.writeFieldBegin('notebookDescription', Thrift.Type.STRING, 1);
    output.writeString(this.notebookDescription);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 2);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.recommended !== null && this.recommended !== undefined) {
    output.writeFieldBegin('recommended', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommended);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SavedSearchScope = function(args) {
  this.includeAccount = null;
  this.includePersonalLinkedNotebooks = null;
  this.includeBusinessLinkedNotebooks = null;
  if (args) {
    if (args.includeAccount !== undefined) {
      this.includeAccount = args.includeAccount;
    }
    if (args.includePersonalLinkedNotebooks !== undefined) {
      this.includePersonalLinkedNotebooks = args.includePersonalLinkedNotebooks;
    }
    if (args.includeBusinessLinkedNotebooks !== undefined) {
      this.includeBusinessLinkedNotebooks = args.includeBusinessLinkedNotebooks;
    }
  }
};
SavedSearchScope.prototype = {};
SavedSearchScope.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAccount = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includePersonalLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeBusinessLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SavedSearchScope.prototype.write = function(output) {
  output.writeStructBegin('SavedSearchScope');
  if (this.includeAccount !== null && this.includeAccount !== undefined) {
    output.writeFieldBegin('includeAccount', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeAccount);
    output.writeFieldEnd();
  }
  if (this.includePersonalLinkedNotebooks !== null && this.includePersonalLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includePersonalLinkedNotebooks', Thrift.Type.BOOL, 2);
    output.writeBool(this.includePersonalLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeBusinessLinkedNotebooks !== null && this.includeBusinessLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeBusinessLinkedNotebooks', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeBusinessLinkedNotebooks);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SavedSearch = function(args) {
  this.guid = null;
  this.name = null;
  this.query = null;
  this.format = null;
  this.updateSequenceNum = null;
  this.scope = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.format !== undefined) {
      this.format = args.format;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
  }
};
SavedSearch.prototype = {};
SavedSearch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.scope = new SavedSearchScope();
        this.scope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SavedSearch.prototype.write = function(output) {
  output.writeStructBegin('SavedSearch');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 4);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.STRUCT, 6);
    this.scope.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Ad = function(args) {
  this.id = null;
  this.width = null;
  this.height = null;
  this.advertiserName = null;
  this.imageUrl = null;
  this.destinationUrl = null;
  this.displaySeconds = null;
  this.score = null;
  this.image = null;
  this.imageMime = null;
  this.html = null;
  this.displayFrequency = null;
  this.openInTrunk = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.advertiserName !== undefined) {
      this.advertiserName = args.advertiserName;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.destinationUrl !== undefined) {
      this.destinationUrl = args.destinationUrl;
    }
    if (args.displaySeconds !== undefined) {
      this.displaySeconds = args.displaySeconds;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.imageMime !== undefined) {
      this.imageMime = args.imageMime;
    }
    if (args.html !== undefined) {
      this.html = args.html;
    }
    if (args.displayFrequency !== undefined) {
      this.displayFrequency = args.displayFrequency;
    }
    if (args.openInTrunk !== undefined) {
      this.openInTrunk = args.openInTrunk;
    }
  }
};
Ad.prototype = {};
Ad.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.advertiserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.destinationUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.displaySeconds = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.imageMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.displayFrequency = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.openInTrunk = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ad.prototype.write = function(output) {
  output.writeStructBegin('Ad');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I16, 2);
    output.writeI16(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I16, 3);
    output.writeI16(this.height);
    output.writeFieldEnd();
  }
  if (this.advertiserName !== null && this.advertiserName !== undefined) {
    output.writeFieldBegin('advertiserName', Thrift.Type.STRING, 4);
    output.writeString(this.advertiserName);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 5);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.destinationUrl !== null && this.destinationUrl !== undefined) {
    output.writeFieldBegin('destinationUrl', Thrift.Type.STRING, 6);
    output.writeString(this.destinationUrl);
    output.writeFieldEnd();
  }
  if (this.displaySeconds !== null && this.displaySeconds !== undefined) {
    output.writeFieldBegin('displaySeconds', Thrift.Type.I16, 7);
    output.writeI16(this.displaySeconds);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 9);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  if (this.imageMime !== null && this.imageMime !== undefined) {
    output.writeFieldBegin('imageMime', Thrift.Type.STRING, 10);
    output.writeString(this.imageMime);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 11);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.displayFrequency !== null && this.displayFrequency !== undefined) {
    output.writeFieldBegin('displayFrequency', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.displayFrequency);
    output.writeFieldEnd();
  }
  if (this.openInTrunk !== null && this.openInTrunk !== undefined) {
    output.writeFieldBegin('openInTrunk', Thrift.Type.BOOL, 13);
    output.writeBool(this.openInTrunk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNotebookRecipientSettings = function(args) {
  this.reminderNotifyEmail = null;
  this.reminderNotifyInApp = null;
  if (args) {
    if (args.reminderNotifyEmail !== undefined) {
      this.reminderNotifyEmail = args.reminderNotifyEmail;
    }
    if (args.reminderNotifyInApp !== undefined) {
      this.reminderNotifyInApp = args.reminderNotifyInApp;
    }
  }
};
SharedNotebookRecipientSettings.prototype = {};
SharedNotebookRecipientSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.reminderNotifyEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.reminderNotifyInApp = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNotebookRecipientSettings.prototype.write = function(output) {
  output.writeStructBegin('SharedNotebookRecipientSettings');
  if (this.reminderNotifyEmail !== null && this.reminderNotifyEmail !== undefined) {
    output.writeFieldBegin('reminderNotifyEmail', Thrift.Type.BOOL, 1);
    output.writeBool(this.reminderNotifyEmail);
    output.writeFieldEnd();
  }
  if (this.reminderNotifyInApp !== null && this.reminderNotifyInApp !== undefined) {
    output.writeFieldBegin('reminderNotifyInApp', Thrift.Type.BOOL, 2);
    output.writeBool(this.reminderNotifyInApp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookRecipientSettings = function(args) {
  this.reminderNotifyEmail = null;
  this.reminderNotifyInApp = null;
  this.inMyList = null;
  this.stack = null;
  if (args) {
    if (args.reminderNotifyEmail !== undefined) {
      this.reminderNotifyEmail = args.reminderNotifyEmail;
    }
    if (args.reminderNotifyInApp !== undefined) {
      this.reminderNotifyInApp = args.reminderNotifyInApp;
    }
    if (args.inMyList !== undefined) {
      this.inMyList = args.inMyList;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
  }
};
NotebookRecipientSettings.prototype = {};
NotebookRecipientSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.reminderNotifyEmail = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.reminderNotifyInApp = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.inMyList = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookRecipientSettings.prototype.write = function(output) {
  output.writeStructBegin('NotebookRecipientSettings');
  if (this.reminderNotifyEmail !== null && this.reminderNotifyEmail !== undefined) {
    output.writeFieldBegin('reminderNotifyEmail', Thrift.Type.BOOL, 1);
    output.writeBool(this.reminderNotifyEmail);
    output.writeFieldEnd();
  }
  if (this.reminderNotifyInApp !== null && this.reminderNotifyInApp !== undefined) {
    output.writeFieldBegin('reminderNotifyInApp', Thrift.Type.BOOL, 2);
    output.writeBool(this.reminderNotifyInApp);
    output.writeFieldEnd();
  }
  if (this.inMyList !== null && this.inMyList !== undefined) {
    output.writeFieldBegin('inMyList', Thrift.Type.BOOL, 3);
    output.writeBool(this.inMyList);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 4);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNotebook = function(args) {
  this.id = null;
  this.userId = null;
  this.notebookGuid = null;
  this.email = null;
  this.recipientIdentityId = null;
  this.notebookModifiable = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.globalId = null;
  this.username = null;
  this.privilege = null;
  this.recipientSettings = null;
  this.sharerUserId = null;
  this.recipientUsername = null;
  this.recipientUserId = null;
  this.serviceAssigned = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.recipientIdentityId !== undefined) {
      this.recipientIdentityId = args.recipientIdentityId;
    }
    if (args.notebookModifiable !== undefined) {
      this.notebookModifiable = args.notebookModifiable;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.globalId !== undefined) {
      this.globalId = args.globalId;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.recipientSettings !== undefined) {
      this.recipientSettings = args.recipientSettings;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
    if (args.recipientUsername !== undefined) {
      this.recipientUsername = args.recipientUsername;
    }
    if (args.recipientUserId !== undefined) {
      this.recipientUserId = args.recipientUserId;
    }
    if (args.serviceAssigned !== undefined) {
      this.serviceAssigned = args.serviceAssigned;
    }
  }
};
SharedNotebook.prototype = {};
SharedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.recipientIdentityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.notebookModifiable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.globalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientSettings = new SharedNotebookRecipientSettings();
        this.recipientSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.recipientUsername = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.recipientUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.serviceAssigned = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNotebook.prototype.write = function(output) {
  output.writeStructBegin('SharedNotebook');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 3);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.recipientIdentityId !== null && this.recipientIdentityId !== undefined) {
    output.writeFieldBegin('recipientIdentityId', Thrift.Type.I64, 18);
    output.writeI64(this.recipientIdentityId);
    output.writeFieldEnd();
  }
  if (this.notebookModifiable !== null && this.notebookModifiable !== undefined) {
    output.writeFieldBegin('notebookModifiable', Thrift.Type.BOOL, 5);
    output.writeBool(this.notebookModifiable);
    output.writeFieldEnd();
  }
  if (this.serviceCreated !== null && this.serviceCreated !== undefined) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated !== null && this.serviceUpdated !== undefined) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 10);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.globalId !== null && this.globalId !== undefined) {
    output.writeFieldBegin('globalId', Thrift.Type.STRING, 8);
    output.writeString(this.globalId);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 9);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 11);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.recipientSettings !== null && this.recipientSettings !== undefined) {
    output.writeFieldBegin('recipientSettings', Thrift.Type.STRUCT, 13);
    this.recipientSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 14);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  if (this.recipientUsername !== null && this.recipientUsername !== undefined) {
    output.writeFieldBegin('recipientUsername', Thrift.Type.STRING, 15);
    output.writeString(this.recipientUsername);
    output.writeFieldEnd();
  }
  if (this.recipientUserId !== null && this.recipientUserId !== undefined) {
    output.writeFieldBegin('recipientUserId', Thrift.Type.I32, 17);
    output.writeI32(this.recipientUserId);
    output.writeFieldEnd();
  }
  if (this.serviceAssigned !== null && this.serviceAssigned !== undefined) {
    output.writeFieldBegin('serviceAssigned', Thrift.Type.I64, 16);
    output.writeI64(this.serviceAssigned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookRestrictions = function(args) {
  this.noReadNotes = null;
  this.noCreateNotes = null;
  this.noUpdateNotes = null;
  this.noExpungeNotes = null;
  this.noShareNotes = null;
  this.noEmailNotes = null;
  this.noSendMessageToRecipients = null;
  this.noUpdateNotebook = null;
  this.noExpungeNotebook = null;
  this.noSetDefaultNotebook = null;
  this.noSetNotebookStack = null;
  this.noPublishToPublic = null;
  this.noPublishToBusinessLibrary = null;
  this.noCreateTags = null;
  this.noUpdateTags = null;
  this.noExpungeTags = null;
  this.noSetParentTag = null;
  this.noCreateSharedNotebooks = null;
  this.updateWhichSharedNotebookRestrictions = null;
  this.expungeWhichSharedNotebookRestrictions = null;
  this.noShareNotesWithBusiness = null;
  this.noRenameNotebook = null;
  if (args) {
    if (args.noReadNotes !== undefined) {
      this.noReadNotes = args.noReadNotes;
    }
    if (args.noCreateNotes !== undefined) {
      this.noCreateNotes = args.noCreateNotes;
    }
    if (args.noUpdateNotes !== undefined) {
      this.noUpdateNotes = args.noUpdateNotes;
    }
    if (args.noExpungeNotes !== undefined) {
      this.noExpungeNotes = args.noExpungeNotes;
    }
    if (args.noShareNotes !== undefined) {
      this.noShareNotes = args.noShareNotes;
    }
    if (args.noEmailNotes !== undefined) {
      this.noEmailNotes = args.noEmailNotes;
    }
    if (args.noSendMessageToRecipients !== undefined) {
      this.noSendMessageToRecipients = args.noSendMessageToRecipients;
    }
    if (args.noUpdateNotebook !== undefined) {
      this.noUpdateNotebook = args.noUpdateNotebook;
    }
    if (args.noExpungeNotebook !== undefined) {
      this.noExpungeNotebook = args.noExpungeNotebook;
    }
    if (args.noSetDefaultNotebook !== undefined) {
      this.noSetDefaultNotebook = args.noSetDefaultNotebook;
    }
    if (args.noSetNotebookStack !== undefined) {
      this.noSetNotebookStack = args.noSetNotebookStack;
    }
    if (args.noPublishToPublic !== undefined) {
      this.noPublishToPublic = args.noPublishToPublic;
    }
    if (args.noPublishToBusinessLibrary !== undefined) {
      this.noPublishToBusinessLibrary = args.noPublishToBusinessLibrary;
    }
    if (args.noCreateTags !== undefined) {
      this.noCreateTags = args.noCreateTags;
    }
    if (args.noUpdateTags !== undefined) {
      this.noUpdateTags = args.noUpdateTags;
    }
    if (args.noExpungeTags !== undefined) {
      this.noExpungeTags = args.noExpungeTags;
    }
    if (args.noSetParentTag !== undefined) {
      this.noSetParentTag = args.noSetParentTag;
    }
    if (args.noCreateSharedNotebooks !== undefined) {
      this.noCreateSharedNotebooks = args.noCreateSharedNotebooks;
    }
    if (args.updateWhichSharedNotebookRestrictions !== undefined) {
      this.updateWhichSharedNotebookRestrictions = args.updateWhichSharedNotebookRestrictions;
    }
    if (args.expungeWhichSharedNotebookRestrictions !== undefined) {
      this.expungeWhichSharedNotebookRestrictions = args.expungeWhichSharedNotebookRestrictions;
    }
    if (args.noShareNotesWithBusiness !== undefined) {
      this.noShareNotesWithBusiness = args.noShareNotesWithBusiness;
    }
    if (args.noRenameNotebook !== undefined) {
      this.noRenameNotebook = args.noRenameNotebook;
    }
  }
};
NotebookRestrictions.prototype = {};
NotebookRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noReadNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.noShareNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.noEmailNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.noSendMessageToRecipients = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetDefaultNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetNotebookStack = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.noPublishToPublic = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.noPublishToBusinessLibrary = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.noUpdateTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.noExpungeTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetParentTag = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.noCreateSharedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.updateWhichSharedNotebookRestrictions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.expungeWhichSharedNotebookRestrictions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.noShareNotesWithBusiness = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.noRenameNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookRestrictions.prototype.write = function(output) {
  output.writeStructBegin('NotebookRestrictions');
  if (this.noReadNotes !== null && this.noReadNotes !== undefined) {
    output.writeFieldBegin('noReadNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.noReadNotes);
    output.writeFieldEnd();
  }
  if (this.noCreateNotes !== null && this.noCreateNotes !== undefined) {
    output.writeFieldBegin('noCreateNotes', Thrift.Type.BOOL, 2);
    output.writeBool(this.noCreateNotes);
    output.writeFieldEnd();
  }
  if (this.noUpdateNotes !== null && this.noUpdateNotes !== undefined) {
    output.writeFieldBegin('noUpdateNotes', Thrift.Type.BOOL, 3);
    output.writeBool(this.noUpdateNotes);
    output.writeFieldEnd();
  }
  if (this.noExpungeNotes !== null && this.noExpungeNotes !== undefined) {
    output.writeFieldBegin('noExpungeNotes', Thrift.Type.BOOL, 4);
    output.writeBool(this.noExpungeNotes);
    output.writeFieldEnd();
  }
  if (this.noShareNotes !== null && this.noShareNotes !== undefined) {
    output.writeFieldBegin('noShareNotes', Thrift.Type.BOOL, 5);
    output.writeBool(this.noShareNotes);
    output.writeFieldEnd();
  }
  if (this.noEmailNotes !== null && this.noEmailNotes !== undefined) {
    output.writeFieldBegin('noEmailNotes', Thrift.Type.BOOL, 6);
    output.writeBool(this.noEmailNotes);
    output.writeFieldEnd();
  }
  if (this.noSendMessageToRecipients !== null && this.noSendMessageToRecipients !== undefined) {
    output.writeFieldBegin('noSendMessageToRecipients', Thrift.Type.BOOL, 7);
    output.writeBool(this.noSendMessageToRecipients);
    output.writeFieldEnd();
  }
  if (this.noUpdateNotebook !== null && this.noUpdateNotebook !== undefined) {
    output.writeFieldBegin('noUpdateNotebook', Thrift.Type.BOOL, 8);
    output.writeBool(this.noUpdateNotebook);
    output.writeFieldEnd();
  }
  if (this.noExpungeNotebook !== null && this.noExpungeNotebook !== undefined) {
    output.writeFieldBegin('noExpungeNotebook', Thrift.Type.BOOL, 9);
    output.writeBool(this.noExpungeNotebook);
    output.writeFieldEnd();
  }
  if (this.noSetDefaultNotebook !== null && this.noSetDefaultNotebook !== undefined) {
    output.writeFieldBegin('noSetDefaultNotebook', Thrift.Type.BOOL, 10);
    output.writeBool(this.noSetDefaultNotebook);
    output.writeFieldEnd();
  }
  if (this.noSetNotebookStack !== null && this.noSetNotebookStack !== undefined) {
    output.writeFieldBegin('noSetNotebookStack', Thrift.Type.BOOL, 11);
    output.writeBool(this.noSetNotebookStack);
    output.writeFieldEnd();
  }
  if (this.noPublishToPublic !== null && this.noPublishToPublic !== undefined) {
    output.writeFieldBegin('noPublishToPublic', Thrift.Type.BOOL, 12);
    output.writeBool(this.noPublishToPublic);
    output.writeFieldEnd();
  }
  if (this.noPublishToBusinessLibrary !== null && this.noPublishToBusinessLibrary !== undefined) {
    output.writeFieldBegin('noPublishToBusinessLibrary', Thrift.Type.BOOL, 13);
    output.writeBool(this.noPublishToBusinessLibrary);
    output.writeFieldEnd();
  }
  if (this.noCreateTags !== null && this.noCreateTags !== undefined) {
    output.writeFieldBegin('noCreateTags', Thrift.Type.BOOL, 14);
    output.writeBool(this.noCreateTags);
    output.writeFieldEnd();
  }
  if (this.noUpdateTags !== null && this.noUpdateTags !== undefined) {
    output.writeFieldBegin('noUpdateTags', Thrift.Type.BOOL, 15);
    output.writeBool(this.noUpdateTags);
    output.writeFieldEnd();
  }
  if (this.noExpungeTags !== null && this.noExpungeTags !== undefined) {
    output.writeFieldBegin('noExpungeTags', Thrift.Type.BOOL, 16);
    output.writeBool(this.noExpungeTags);
    output.writeFieldEnd();
  }
  if (this.noSetParentTag !== null && this.noSetParentTag !== undefined) {
    output.writeFieldBegin('noSetParentTag', Thrift.Type.BOOL, 17);
    output.writeBool(this.noSetParentTag);
    output.writeFieldEnd();
  }
  if (this.noCreateSharedNotebooks !== null && this.noCreateSharedNotebooks !== undefined) {
    output.writeFieldBegin('noCreateSharedNotebooks', Thrift.Type.BOOL, 18);
    output.writeBool(this.noCreateSharedNotebooks);
    output.writeFieldEnd();
  }
  if (this.updateWhichSharedNotebookRestrictions !== null && this.updateWhichSharedNotebookRestrictions !== undefined) {
    output.writeFieldBegin('updateWhichSharedNotebookRestrictions', Thrift.Type.I32, 19);
    output.writeI32(this.updateWhichSharedNotebookRestrictions);
    output.writeFieldEnd();
  }
  if (this.expungeWhichSharedNotebookRestrictions !== null && this.expungeWhichSharedNotebookRestrictions !== undefined) {
    output.writeFieldBegin('expungeWhichSharedNotebookRestrictions', Thrift.Type.I32, 20);
    output.writeI32(this.expungeWhichSharedNotebookRestrictions);
    output.writeFieldEnd();
  }
  if (this.noShareNotesWithBusiness !== null && this.noShareNotesWithBusiness !== undefined) {
    output.writeFieldBegin('noShareNotesWithBusiness', Thrift.Type.BOOL, 21);
    output.writeBool(this.noShareNotesWithBusiness);
    output.writeFieldEnd();
  }
  if (this.noRenameNotebook !== null && this.noRenameNotebook !== undefined) {
    output.writeFieldBegin('noRenameNotebook', Thrift.Type.BOOL, 22);
    output.writeBool(this.noRenameNotebook);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notebook = function(args) {
  this.guid = null;
  this.name = null;
  this.updateSequenceNum = null;
  this.defaultNotebook = null;
  this.serviceCreated = null;
  this.serviceUpdated = null;
  this.publishing = null;
  this.published = null;
  this.stack = null;
  this.sharedNotebookIds = null;
  this.sharedNotebooks = null;
  this.businessNotebook = null;
  this.contact = null;
  this.restrictions = null;
  this.recipientSettings = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.defaultNotebook !== undefined) {
      this.defaultNotebook = args.defaultNotebook;
    }
    if (args.serviceCreated !== undefined) {
      this.serviceCreated = args.serviceCreated;
    }
    if (args.serviceUpdated !== undefined) {
      this.serviceUpdated = args.serviceUpdated;
    }
    if (args.publishing !== undefined) {
      this.publishing = args.publishing;
    }
    if (args.published !== undefined) {
      this.published = args.published;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
    if (args.sharedNotebookIds !== undefined) {
      this.sharedNotebookIds = args.sharedNotebookIds;
    }
    if (args.sharedNotebooks !== undefined) {
      this.sharedNotebooks = args.sharedNotebooks;
    }
    if (args.businessNotebook !== undefined) {
      this.businessNotebook = args.businessNotebook;
    }
    if (args.contact !== undefined) {
      this.contact = args.contact;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
    if (args.recipientSettings !== undefined) {
      this.recipientSettings = args.recipientSettings;
    }
  }
};
Notebook.prototype = {};
Notebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.defaultNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.publishing = new Publishing();
        this.publishing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.sharedNotebookIds = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = input.readI64().value;
          this.sharedNotebookIds.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size83 = 0;
        var _rtmp387;
        this.sharedNotebooks = [];
        var _etype86 = 0;
        _rtmp387 = input.readListBegin();
        _etype86 = _rtmp387.etype;
        _size83 = _rtmp387.size;
        for (var _i88 = 0; _i88 < _size83; ++_i88)
        {
          var elem89 = null;
          elem89 = new SharedNotebook();
          elem89.read(input);
          this.sharedNotebooks.push(elem89);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.businessNotebook = new BusinessNotebook();
        this.businessNotebook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new User();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new NotebookRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientSettings = new NotebookRecipientSettings();
        this.recipientSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notebook.prototype.write = function(output) {
  output.writeStructBegin('Notebook');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.defaultNotebook !== null && this.defaultNotebook !== undefined) {
    output.writeFieldBegin('defaultNotebook', Thrift.Type.BOOL, 6);
    output.writeBool(this.defaultNotebook);
    output.writeFieldEnd();
  }
  if (this.serviceCreated !== null && this.serviceCreated !== undefined) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7);
    output.writeI64(this.serviceCreated);
    output.writeFieldEnd();
  }
  if (this.serviceUpdated !== null && this.serviceUpdated !== undefined) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 8);
    output.writeI64(this.serviceUpdated);
    output.writeFieldEnd();
  }
  if (this.publishing !== null && this.publishing !== undefined) {
    output.writeFieldBegin('publishing', Thrift.Type.STRUCT, 10);
    this.publishing.write(output);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 11);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 12);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookIds !== null && this.sharedNotebookIds !== undefined) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length);
    for (var iter90 in this.sharedNotebookIds)
    {
      if (this.sharedNotebookIds.hasOwnProperty(iter90))
      {
        iter90 = this.sharedNotebookIds[iter90];
        output.writeI64(iter90);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharedNotebooks !== null && this.sharedNotebooks !== undefined) {
    output.writeFieldBegin('sharedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.sharedNotebooks.length);
    for (var iter91 in this.sharedNotebooks)
    {
      if (this.sharedNotebooks.hasOwnProperty(iter91))
      {
        iter91 = this.sharedNotebooks[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.businessNotebook !== null && this.businessNotebook !== undefined) {
    output.writeFieldBegin('businessNotebook', Thrift.Type.STRUCT, 15);
    this.businessNotebook.write(output);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 16);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 17);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  if (this.recipientSettings !== null && this.recipientSettings !== undefined) {
    output.writeFieldBegin('recipientSettings', Thrift.Type.STRUCT, 18);
    this.recipientSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkedNotebook = function(args) {
  this.shareName = null;
  this.username = null;
  this.shardId = null;
  this.sharedNotebookGlobalId = null;
  this.uri = null;
  this.guid = null;
  this.updateSequenceNum = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  this.stack = null;
  this.businessId = null;
  if (args) {
    if (args.shareName !== undefined) {
      this.shareName = args.shareName;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.shardId !== undefined) {
      this.shardId = args.shardId;
    }
    if (args.sharedNotebookGlobalId !== undefined) {
      this.sharedNotebookGlobalId = args.sharedNotebookGlobalId;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.noteStoreUrl !== undefined) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
    if (args.stack !== undefined) {
      this.stack = args.stack;
    }
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
  }
};
LinkedNotebook.prototype = {};
LinkedNotebook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shareName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sharedNotebookGlobalId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkedNotebook.prototype.write = function(output) {
  output.writeStructBegin('LinkedNotebook');
  if (this.shareName !== null && this.shareName !== undefined) {
    output.writeFieldBegin('shareName', Thrift.Type.STRING, 2);
    output.writeString(this.shareName);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 4);
    output.writeString(this.shardId);
    output.writeFieldEnd();
  }
  if (this.sharedNotebookGlobalId !== null && this.sharedNotebookGlobalId !== undefined) {
    output.writeFieldBegin('sharedNotebookGlobalId', Thrift.Type.STRING, 5);
    output.writeString(this.sharedNotebookGlobalId);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 6);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 7);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 8);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 9);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 10);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  if (this.stack !== null && this.stack !== undefined) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 11);
    output.writeString(this.stack);
    output.writeFieldEnd();
  }
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 12);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookDescriptor = function(args) {
  this.guid = null;
  this.notebookDisplayName = null;
  this.contactName = null;
  this.hasSharedNotebook = null;
  this.joinedUserCount = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.notebookDisplayName !== undefined) {
      this.notebookDisplayName = args.notebookDisplayName;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.hasSharedNotebook !== undefined) {
      this.hasSharedNotebook = args.hasSharedNotebook;
    }
    if (args.joinedUserCount !== undefined) {
      this.joinedUserCount = args.joinedUserCount;
    }
  }
};
NotebookDescriptor.prototype = {};
NotebookDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookDisplayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSharedNotebook = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.joinedUserCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookDescriptor.prototype.write = function(output) {
  output.writeStructBegin('NotebookDescriptor');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.notebookDisplayName !== null && this.notebookDisplayName !== undefined) {
    output.writeFieldBegin('notebookDisplayName', Thrift.Type.STRING, 2);
    output.writeString(this.notebookDisplayName);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 3);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.hasSharedNotebook !== null && this.hasSharedNotebook !== undefined) {
    output.writeFieldBegin('hasSharedNotebook', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasSharedNotebook);
    output.writeFieldEnd();
  }
  if (this.joinedUserCount !== null && this.joinedUserCount !== undefined) {
    output.writeFieldBegin('joinedUserCount', Thrift.Type.I32, 5);
    output.writeI32(this.joinedUserCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserProfile = function(args) {
  this.id = null;
  this.name = null;
  this.email = null;
  this.username = null;
  this.attributes = null;
  this.joined = null;
  this.photoLastUpdated = null;
  this.photoUrl = null;
  this.role = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.joined !== undefined) {
      this.joined = args.joined;
    }
    if (args.photoLastUpdated !== undefined) {
      this.photoLastUpdated = args.photoLastUpdated;
    }
    if (args.photoUrl !== undefined) {
      this.photoUrl = args.photoUrl;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
  }
};
UserProfile.prototype = {};
UserProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new BusinessUserAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.joined = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.photoLastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.photoUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfile.prototype.write = function(output) {
  output.writeStructBegin('UserProfile');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 5);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.joined !== null && this.joined !== undefined) {
    output.writeFieldBegin('joined', Thrift.Type.I64, 6);
    output.writeI64(this.joined);
    output.writeFieldEnd();
  }
  if (this.photoLastUpdated !== null && this.photoLastUpdated !== undefined) {
    output.writeFieldBegin('photoLastUpdated', Thrift.Type.I64, 7);
    output.writeI64(this.photoLastUpdated);
    output.writeFieldEnd();
  }
  if (this.photoUrl !== null && this.photoUrl !== undefined) {
    output.writeFieldBegin('photoUrl', Thrift.Type.STRING, 8);
    output.writeString(this.photoUrl);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 9);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedContentImage = function(args) {
  this.url = null;
  this.width = null;
  this.height = null;
  this.pixelRatio = null;
  this.fileSize = null;
  if (args) {
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.pixelRatio !== undefined) {
      this.pixelRatio = args.pixelRatio;
    }
    if (args.fileSize !== undefined) {
      this.fileSize = args.fileSize;
    }
  }
};
RelatedContentImage.prototype = {};
RelatedContentImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pixelRatio = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fileSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedContentImage.prototype.write = function(output) {
  output.writeStructBegin('RelatedContentImage');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 2);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 3);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.pixelRatio !== null && this.pixelRatio !== undefined) {
    output.writeFieldBegin('pixelRatio', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.pixelRatio);
    output.writeFieldEnd();
  }
  if (this.fileSize !== null && this.fileSize !== undefined) {
    output.writeFieldBegin('fileSize', Thrift.Type.I32, 5);
    output.writeI32(this.fileSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedContent = function(args) {
  this.contentId = null;
  this.title = null;
  this.url = null;
  this.sourceId = null;
  this.sourceUrl = null;
  this.sourceFaviconUrl = null;
  this.sourceName = null;
  this.date = null;
  this.teaser = null;
  this.thumbnails = null;
  this.contentType = null;
  this.accessType = null;
  this.visibleUrl = null;
  this.clipUrl = null;
  this.contact = null;
  this.authors = null;
  if (args) {
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.sourceId !== undefined) {
      this.sourceId = args.sourceId;
    }
    if (args.sourceUrl !== undefined) {
      this.sourceUrl = args.sourceUrl;
    }
    if (args.sourceFaviconUrl !== undefined) {
      this.sourceFaviconUrl = args.sourceFaviconUrl;
    }
    if (args.sourceName !== undefined) {
      this.sourceName = args.sourceName;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.teaser !== undefined) {
      this.teaser = args.teaser;
    }
    if (args.thumbnails !== undefined) {
      this.thumbnails = args.thumbnails;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.accessType !== undefined) {
      this.accessType = args.accessType;
    }
    if (args.visibleUrl !== undefined) {
      this.visibleUrl = args.visibleUrl;
    }
    if (args.clipUrl !== undefined) {
      this.clipUrl = args.clipUrl;
    }
    if (args.contact !== undefined) {
      this.contact = args.contact;
    }
    if (args.authors !== undefined) {
      this.authors = args.authors;
    }
  }
};
RelatedContent.prototype = {};
RelatedContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sourceUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sourceFaviconUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sourceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.teaser = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.thumbnails = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new RelatedContentImage();
          elem98.read(input);
          this.thumbnails.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.accessType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.visibleUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.clipUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size99 = 0;
        var _rtmp3103;
        this.authors = [];
        var _etype102 = 0;
        _rtmp3103 = input.readListBegin();
        _etype102 = _rtmp3103.etype;
        _size99 = _rtmp3103.size;
        for (var _i104 = 0; _i104 < _size99; ++_i104)
        {
          var elem105 = null;
          elem105 = input.readString().value;
          this.authors.push(elem105);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedContent.prototype.write = function(output) {
  output.writeStructBegin('RelatedContent');
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 1);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRING, 4);
    output.writeString(this.sourceId);
    output.writeFieldEnd();
  }
  if (this.sourceUrl !== null && this.sourceUrl !== undefined) {
    output.writeFieldBegin('sourceUrl', Thrift.Type.STRING, 5);
    output.writeString(this.sourceUrl);
    output.writeFieldEnd();
  }
  if (this.sourceFaviconUrl !== null && this.sourceFaviconUrl !== undefined) {
    output.writeFieldBegin('sourceFaviconUrl', Thrift.Type.STRING, 6);
    output.writeString(this.sourceFaviconUrl);
    output.writeFieldEnd();
  }
  if (this.sourceName !== null && this.sourceName !== undefined) {
    output.writeFieldBegin('sourceName', Thrift.Type.STRING, 7);
    output.writeString(this.sourceName);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 8);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.teaser !== null && this.teaser !== undefined) {
    output.writeFieldBegin('teaser', Thrift.Type.STRING, 9);
    output.writeString(this.teaser);
    output.writeFieldEnd();
  }
  if (this.thumbnails !== null && this.thumbnails !== undefined) {
    output.writeFieldBegin('thumbnails', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.thumbnails.length);
    for (var iter106 in this.thumbnails)
    {
      if (this.thumbnails.hasOwnProperty(iter106))
      {
        iter106 = this.thumbnails[iter106];
        iter106.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 11);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.accessType !== null && this.accessType !== undefined) {
    output.writeFieldBegin('accessType', Thrift.Type.I32, 12);
    output.writeI32(this.accessType);
    output.writeFieldEnd();
  }
  if (this.visibleUrl !== null && this.visibleUrl !== undefined) {
    output.writeFieldBegin('visibleUrl', Thrift.Type.STRING, 13);
    output.writeString(this.visibleUrl);
    output.writeFieldEnd();
  }
  if (this.clipUrl !== null && this.clipUrl !== undefined) {
    output.writeFieldBegin('clipUrl', Thrift.Type.STRING, 14);
    output.writeString(this.clipUrl);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 15);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.authors !== null && this.authors !== undefined) {
    output.writeFieldBegin('authors', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.authors.length);
    for (var iter107 in this.authors)
    {
      if (this.authors.hasOwnProperty(iter107))
      {
        iter107 = this.authors[iter107];
        output.writeString(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BusinessInvitation = function(args) {
  this.businessId = null;
  this.email = null;
  this.role = null;
  this.status = null;
  this.requesterId = null;
  this.fromWorkChat = null;
  this.created = null;
  if (args) {
    if (args.businessId !== undefined) {
      this.businessId = args.businessId;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.requesterId !== undefined) {
      this.requesterId = args.requesterId;
    }
    if (args.fromWorkChat !== undefined) {
      this.fromWorkChat = args.fromWorkChat;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
  }
};
BusinessInvitation.prototype = {};
BusinessInvitation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.businessId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.requesterId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.fromWorkChat = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessInvitation.prototype.write = function(output) {
  output.writeStructBegin('BusinessInvitation');
  if (this.businessId !== null && this.businessId !== undefined) {
    output.writeFieldBegin('businessId', Thrift.Type.I32, 1);
    output.writeI32(this.businessId);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 3);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.requesterId !== null && this.requesterId !== undefined) {
    output.writeFieldBegin('requesterId', Thrift.Type.I32, 5);
    output.writeI32(this.requesterId);
    output.writeFieldEnd();
  }
  if (this.fromWorkChat !== null && this.fromWorkChat !== undefined) {
    output.writeFieldBegin('fromWorkChat', Thrift.Type.BOOL, 6);
    output.writeBool(this.fromWorkChat);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 7);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserIdentity = function(args) {
  this.type = null;
  this.stringIdentifier = null;
  this.longIdentifier = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.stringIdentifier !== undefined) {
      this.stringIdentifier = args.stringIdentifier;
    }
    if (args.longIdentifier !== undefined) {
      this.longIdentifier = args.longIdentifier;
    }
  }
};
UserIdentity.prototype = {};
UserIdentity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.longIdentifier = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserIdentity.prototype.write = function(output) {
  output.writeStructBegin('UserIdentity');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.stringIdentifier !== null && this.stringIdentifier !== undefined) {
    output.writeFieldBegin('stringIdentifier', Thrift.Type.STRING, 2);
    output.writeString(this.stringIdentifier);
    output.writeFieldEnd();
  }
  if (this.longIdentifier !== null && this.longIdentifier !== undefined) {
    output.writeFieldBegin('longIdentifier', Thrift.Type.I64, 3);
    output.writeI64(this.longIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

