//
// Autogenerated by Thrift Compiler (0.6.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

UserSetting = {
'RECEIVE_REMINDER_EMAIL' : 1,
'TIMEZONE' : 2
};
ShareRelationshipPrivilegeLevel = {
'READ_NOTEBOOK' : 0,
'READ_NOTEBOOK_PLUS_ACTIVITY' : 10,
'MODIFY_NOTEBOOK_PLUS_ACTIVITY' : 20,
'FULL_ACCESS' : 30
};
SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  this.userLastUpdated = null;
  this.userMaxMessageEventId = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.fullSyncBefore !== undefined) {
      this.fullSyncBefore = args.fullSyncBefore;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.uploaded !== undefined) {
      this.uploaded = args.uploaded;
    }
    if (args.userLastUpdated !== undefined) {
      this.userLastUpdated = args.userLastUpdated;
    }
    if (args.userMaxMessageEventId !== undefined) {
      this.userMaxMessageEventId = args.userMaxMessageEventId;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userLastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.userMaxMessageEventId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype.write = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  if (this.userLastUpdated !== null && this.userLastUpdated !== undefined) {
    output.writeFieldBegin('userLastUpdated', Thrift.Type.I64, 5);
    output.writeI64(this.userLastUpdated);
    output.writeFieldEnd();
  }
  if (this.userMaxMessageEventId !== null && this.userMaxMessageEventId !== undefined) {
    output.writeFieldBegin('userMaxMessageEventId', Thrift.Type.I64, 6);
    output.writeI64(this.userMaxMessageEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.chunkHighUSN !== undefined) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.searches !== undefined) {
      this.searches = args.searches;
    }
    if (args.resources !== undefined) {
      this.resources = args.resources;
    }
    if (args.expungedNotes !== undefined) {
      this.expungedNotes = args.expungedNotes;
    }
    if (args.expungedNotebooks !== undefined) {
      this.expungedNotebooks = args.expungedNotebooks;
    }
    if (args.expungedTags !== undefined) {
      this.expungedTags = args.expungedTags;
    }
    if (args.expungedSearches !== undefined) {
      this.expungedSearches = args.expungedSearches;
    }
    if (args.linkedNotebooks !== undefined) {
      this.linkedNotebooks = args.linkedNotebooks;
    }
    if (args.expungedLinkedNotebooks !== undefined) {
      this.expungedLinkedNotebooks = args.expungedLinkedNotebooks;
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.notes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Note();
          elem6.read(input);
          this.notes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.notebooks = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new Notebook();
          elem13.read(input);
          this.notebooks.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.tags = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new Tag();
          elem20.read(input);
          this.tags.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.searches = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new SavedSearch();
          elem27.read(input);
          this.searches.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.resources = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new Resource();
          elem34.read(input);
          this.resources.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.expungedNotes = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readString().value;
          this.expungedNotes.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.expungedNotebooks = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.expungedNotebooks.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.expungedTags = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readString().value;
          this.expungedTags.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.expungedSearches = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString().value;
          this.expungedSearches.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.linkedNotebooks = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new LinkedNotebook();
          elem69.read(input);
          this.linkedNotebooks.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.expungedLinkedNotebooks = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString().value;
          this.expungedLinkedNotebooks.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype.write = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN !== null && this.chunkHighUSN !== undefined) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter77 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter77))
      {
        iter77 = this.notes[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter78 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter78))
      {
        iter78 = this.notebooks[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter79 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter79))
      {
        iter79 = this.tags[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches !== null && this.searches !== undefined) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter80 in this.searches)
    {
      if (this.searches.hasOwnProperty(iter80))
      {
        iter80 = this.searches[iter80];
        iter80.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter81 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter81))
      {
        iter81 = this.resources[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes !== null && this.expungedNotes !== undefined) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter82 in this.expungedNotes)
    {
      if (this.expungedNotes.hasOwnProperty(iter82))
      {
        iter82 = this.expungedNotes[iter82];
        output.writeString(iter82);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks !== null && this.expungedNotebooks !== undefined) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter83 in this.expungedNotebooks)
    {
      if (this.expungedNotebooks.hasOwnProperty(iter83))
      {
        iter83 = this.expungedNotebooks[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags !== null && this.expungedTags !== undefined) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter84 in this.expungedTags)
    {
      if (this.expungedTags.hasOwnProperty(iter84))
      {
        iter84 = this.expungedTags[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches !== null && this.expungedSearches !== undefined) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter85 in this.expungedSearches)
    {
      if (this.expungedSearches.hasOwnProperty(iter85))
      {
        iter85 = this.expungedSearches[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks !== null && this.linkedNotebooks !== undefined) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter86 in this.linkedNotebooks)
    {
      if (this.linkedNotebooks.hasOwnProperty(iter86))
      {
        iter86 = this.linkedNotebooks[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks !== null && this.expungedLinkedNotebooks !== undefined) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter87 in this.expungedLinkedNotebooks)
    {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter87))
      {
        iter87 = this.expungedLinkedNotebooks[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.includeSharedNotes = null;
  this.omitSharedNotebooks = null;
  this.requireNoteContentClass = null;
  this.notebookGuids = null;
  if (args) {
    if (args.includeNotes !== undefined) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.includeSharedNotes !== undefined) {
      this.includeSharedNotes = args.includeSharedNotes;
    }
    if (args.omitSharedNotebooks !== undefined) {
      this.omitSharedNotebooks = args.omitSharedNotebooks;
    }
    if (args.requireNoteContentClass !== undefined) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
    if (args.notebookGuids !== undefined) {
      this.notebookGuids = args.notebookGuids;
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSharedNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.omitSharedNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.SET) {
        var _size88 = 0;
        var _rtmp392;
        this.notebookGuids = [];
        var _etype91 = 0;
        _rtmp392 = input.readSetBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString().value;
          this.notebookGuids.push(elem94);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype.write = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes !== null && this.includeNotes !== undefined) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources !== null && this.includeNoteResources !== undefined) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes !== null && this.includeNoteAttributes !== undefined) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags !== null && this.includeTags !== undefined) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches !== null && this.includeSearches !== undefined) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources !== null && this.includeResources !== undefined) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks !== null && this.includeLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged !== null && this.includeExpunged !== undefined) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap !== null && this.includeNoteApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap !== null && this.includeResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap !== null && this.includeNoteResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeSharedNotes !== null && this.includeSharedNotes !== undefined) {
    output.writeFieldBegin('includeSharedNotes', Thrift.Type.BOOL, 17);
    output.writeBool(this.includeSharedNotes);
    output.writeFieldEnd();
  }
  if (this.omitSharedNotebooks !== null && this.omitSharedNotebooks !== undefined) {
    output.writeFieldBegin('omitSharedNotebooks', Thrift.Type.BOOL, 16);
    output.writeBool(this.omitSharedNotebooks);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass !== null && this.requireNoteContentClass !== undefined) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  if (this.notebookGuids !== null && this.notebookGuids !== undefined) {
    output.writeFieldBegin('notebookGuids', Thrift.Type.SET, 15);
    output.writeSetBegin(Thrift.Type.STRING, this.notebookGuids.length);
    for (var iter95 in this.notebookGuids)
    {
      if (this.notebookGuids.hasOwnProperty(iter95))
      {
        iter95 = this.notebookGuids[iter95];
        output.writeString(iter95);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  this.emphasized = null;
  this.includeAllReadableNotebooks = null;
  if (args) {
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined) {
      this.inactive = args.inactive;
    }
    if (args.emphasized !== undefined) {
      this.emphasized = args.emphasized;
    }
    if (args.includeAllReadableNotebooks !== undefined) {
      this.includeAllReadableNotebooks = args.includeAllReadableNotebooks;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.tagGuids = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.tagGuids.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.emphasized = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAllReadableNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype.write = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter103 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter103))
      {
        iter103 = this.tagGuids[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive !== null && this.inactive !== undefined) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  if (this.emphasized !== null && this.emphasized !== undefined) {
    output.writeFieldBegin('emphasized', Thrift.Type.STRING, 8);
    output.writeString(this.emphasized);
    output.writeFieldEnd();
  }
  if (this.includeAllReadableNotebooks !== null && this.includeAllReadableNotebooks !== undefined) {
    output.writeFieldBegin('includeAllReadableNotebooks', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeAllReadableNotebooks);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.notes = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new Note();
          elem110.read(input);
          this.notes.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.stoppedWords = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = input.readString().value;
          this.stoppedWords.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.searchedWords = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = input.readString().value;
          this.searchedWords.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype.write = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter125 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter125))
      {
        iter125 = this.notes[iter125];
        iter125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter126 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter126))
      {
        iter126 = this.stoppedWords[iter126];
        output.writeString(iter126);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter127 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter127))
      {
        iter127 = this.searchedWords[iter127];
        output.writeString(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined) {
      this.tagGuids = args.tagGuids;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.largestResourceMime !== undefined) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.tagGuids = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readString().value;
          this.tagGuids.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new NoteAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype.write = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter135 in this.tagGuids)
    {
      if (this.tagGuids.hasOwnProperty(iter135))
      {
        iter135 = this.tagGuids[iter135];
        output.writeString(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime !== null && this.largestResourceMime !== undefined) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize !== null && this.largestResourceSize !== undefined) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.totalNotes !== undefined) {
      this.totalNotes = args.totalNotes;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.stoppedWords !== undefined) {
      this.stoppedWords = args.stoppedWords;
    }
    if (args.searchedWords !== undefined) {
      this.searchedWords = args.searchedWords;
    }
    if (args.updateCount !== undefined) {
      this.updateCount = args.updateCount;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.notes = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new NoteMetadata();
          elem142.read(input);
          this.notes.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size143 = 0;
        var _rtmp3147;
        this.stoppedWords = [];
        var _etype146 = 0;
        _rtmp3147 = input.readListBegin();
        _etype146 = _rtmp3147.etype;
        _size143 = _rtmp3147.size;
        for (var _i148 = 0; _i148 < _size143; ++_i148)
        {
          var elem149 = null;
          elem149 = input.readString().value;
          this.stoppedWords.push(elem149);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.searchedWords = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = input.readString().value;
          this.searchedWords.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter157 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter157))
      {
        iter157 = this.notes[iter157];
        iter157.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter158 in this.stoppedWords)
    {
      if (this.stoppedWords.hasOwnProperty(iter158))
      {
        iter158 = this.stoppedWords[iter158];
        output.writeString(iter158);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter159 in this.searchedWords)
    {
      if (this.searchedWords.hasOwnProperty(iter159))
      {
        iter159 = this.searchedWords[iter159];
        output.writeString(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeDeleted = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeDeleted !== undefined) {
      this.includeDeleted = args.includeDeleted;
    }
    if (args.includeUpdateSequenceNum !== undefined) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDeleted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle !== null && this.includeTitle !== undefined) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength !== null && this.includeContentLength !== undefined) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated !== null && this.includeCreated !== undefined) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated !== null && this.includeUpdated !== undefined) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeDeleted !== null && this.includeDeleted !== undefined) {
    output.writeFieldBegin('includeDeleted', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeDeleted);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum !== null && this.includeUpdateSequenceNum !== undefined) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid !== null && this.includeNotebookGuid !== undefined) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids !== null && this.includeTagGuids !== undefined) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime !== null && this.includeLargestResourceMime !== undefined) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize !== null && this.includeLargestResourceSize !== undefined) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined) {
      this.notebookCounts = args.notebookCounts;
    }
    if (args.tagCounts !== undefined) {
      this.tagCounts = args.tagCounts;
    }
    if (args.trashCount !== undefined) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size160 = 0;
        var _rtmp3164;
        this.notebookCounts = {};
        var _ktype161 = 0;
        var _vtype162 = 0;
        _rtmp3164 = input.readMapBegin();
        _ktype161 = _rtmp3164.ktype;
        _vtype162 = _rtmp3164.vtype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          if (_i165 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key166 = null;
          var val167 = null;
          key166 = input.readString().value;
          val167 = input.readI32().value;
          this.notebookCounts[key166] = val167;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size168 = 0;
        var _rtmp3172;
        this.tagCounts = {};
        var _ktype169 = 0;
        var _vtype170 = 0;
        _rtmp3172 = input.readMapBegin();
        _ktype169 = _rtmp3172.ktype;
        _vtype170 = _rtmp3172.vtype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          if (_i173 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key174 = null;
          var val175 = null;
          key174 = input.readString().value;
          val175 = input.readI32().value;
          this.tagCounts[key174] = val175;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype.write = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts !== null && this.notebookCounts !== undefined) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter176 in this.notebookCounts)
    {
      if (this.notebookCounts.hasOwnProperty(kiter176))
      {
        var viter177 = this.notebookCounts[kiter176];
        output.writeString(kiter176);
        output.writeI32(viter177);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts !== null && this.tagCounts !== undefined) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter178 in this.tagCounts)
    {
      if (this.tagCounts.hasOwnProperty(kiter178))
      {
        var viter179 = this.tagCounts[kiter178];
        output.writeString(kiter178);
        output.writeI32(viter179);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount !== null && this.trashCount !== undefined) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteResultSpec = function(args) {
  this.includeContent = null;
  this.includeResourcesData = null;
  this.includeResourcesRecognition = null;
  this.includeResourcesAlternateData = null;
  this.includeSharedNotes = null;
  this.includeNoteAppDataValues = null;
  this.includeResourceAppDataValues = null;
  this.includeAccountLimits = null;
  if (args) {
    if (args.includeContent !== undefined) {
      this.includeContent = args.includeContent;
    }
    if (args.includeResourcesData !== undefined) {
      this.includeResourcesData = args.includeResourcesData;
    }
    if (args.includeResourcesRecognition !== undefined) {
      this.includeResourcesRecognition = args.includeResourcesRecognition;
    }
    if (args.includeResourcesAlternateData !== undefined) {
      this.includeResourcesAlternateData = args.includeResourcesAlternateData;
    }
    if (args.includeSharedNotes !== undefined) {
      this.includeSharedNotes = args.includeSharedNotes;
    }
    if (args.includeNoteAppDataValues !== undefined) {
      this.includeNoteAppDataValues = args.includeNoteAppDataValues;
    }
    if (args.includeResourceAppDataValues !== undefined) {
      this.includeResourceAppDataValues = args.includeResourceAppDataValues;
    }
    if (args.includeAccountLimits !== undefined) {
      this.includeAccountLimits = args.includeAccountLimits;
    }
  }
};
NoteResultSpec.prototype = {};
NoteResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesRecognition = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesAlternateData = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSharedNotes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAppDataValues = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceAppDataValues = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAccountLimits = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteResultSpec.prototype.write = function(output) {
  output.writeStructBegin('NoteResultSpec');
  if (this.includeContent !== null && this.includeContent !== undefined) {
    output.writeFieldBegin('includeContent', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeContent);
    output.writeFieldEnd();
  }
  if (this.includeResourcesData !== null && this.includeResourcesData !== undefined) {
    output.writeFieldBegin('includeResourcesData', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeResourcesData);
    output.writeFieldEnd();
  }
  if (this.includeResourcesRecognition !== null && this.includeResourcesRecognition !== undefined) {
    output.writeFieldBegin('includeResourcesRecognition', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.includeResourcesAlternateData !== null && this.includeResourcesAlternateData !== undefined) {
    output.writeFieldBegin('includeResourcesAlternateData', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeResourcesAlternateData);
    output.writeFieldEnd();
  }
  if (this.includeSharedNotes !== null && this.includeSharedNotes !== undefined) {
    output.writeFieldBegin('includeSharedNotes', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeSharedNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteAppDataValues !== null && this.includeNoteAppDataValues !== undefined) {
    output.writeFieldBegin('includeNoteAppDataValues', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeNoteAppDataValues);
    output.writeFieldEnd();
  }
  if (this.includeResourceAppDataValues !== null && this.includeResourceAppDataValues !== undefined) {
    output.writeFieldBegin('includeResourceAppDataValues', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResourceAppDataValues);
    output.writeFieldEnd();
  }
  if (this.includeAccountLimits !== null && this.includeAccountLimits !== undefined) {
    output.writeFieldBegin('includeAccountLimits', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeAccountLimits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.toAddresses !== undefined) {
      this.toAddresses = args.toAddresses;
    }
    if (args.ccAddresses !== undefined) {
      this.ccAddresses = args.ccAddresses;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.toAddresses = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = input.readString().value;
          this.toAddresses.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size187 = 0;
        var _rtmp3191;
        this.ccAddresses = [];
        var _etype190 = 0;
        _rtmp3191 = input.readListBegin();
        _etype190 = _rtmp3191.etype;
        _size187 = _rtmp3191.size;
        for (var _i192 = 0; _i192 < _size187; ++_i192)
        {
          var elem193 = null;
          elem193 = input.readString().value;
          this.ccAddresses.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype.write = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddresses !== null && this.toAddresses !== undefined) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter194 in this.toAddresses)
    {
      if (this.toAddresses.hasOwnProperty(iter194))
      {
        iter194 = this.toAddresses[iter194];
        output.writeString(iter194);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses !== null && this.ccAddresses !== undefined) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter195 in this.ccAddresses)
    {
      if (this.ccAddresses.hasOwnProperty(iter195))
      {
        iter195 = this.ccAddresses[iter195];
        output.writeString(iter195);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  this.lastEditorId = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
    if (args.saved !== undefined) {
      this.saved = args.saved;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.lastEditorId !== undefined) {
      this.lastEditorId = args.lastEditorId;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastEditorId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype.write = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved !== null && this.saved !== undefined) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.lastEditorId !== null && this.lastEditorId !== undefined) {
    output.writeFieldBegin('lastEditorId', Thrift.Type.I32, 5);
    output.writeI32(this.lastEditorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedQuery = function(args) {
  this.noteGuid = null;
  this.plainText = null;
  this.filter = null;
  this.referenceUri = null;
  this.context = null;
  this.cacheKey = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.plainText !== undefined) {
      this.plainText = args.plainText;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.referenceUri !== undefined) {
      this.referenceUri = args.referenceUri;
    }
    if (args.context !== undefined) {
      this.context = args.context;
    }
    if (args.cacheKey !== undefined) {
      this.cacheKey = args.cacheKey;
    }
  }
};
RelatedQuery.prototype = {};
RelatedQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plainText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new NoteFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.referenceUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cacheKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedQuery.prototype.write = function(output) {
  output.writeStructBegin('RelatedQuery');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.plainText !== null && this.plainText !== undefined) {
    output.writeFieldBegin('plainText', Thrift.Type.STRING, 2);
    output.writeString(this.plainText);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceUri !== null && this.referenceUri !== undefined) {
    output.writeFieldBegin('referenceUri', Thrift.Type.STRING, 4);
    output.writeString(this.referenceUri);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 5);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.cacheKey !== null && this.cacheKey !== undefined) {
    output.writeFieldBegin('cacheKey', Thrift.Type.STRING, 6);
    output.writeString(this.cacheKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResult = function(args) {
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.containingNotebooks = null;
  this.debugInfo = null;
  this.experts = null;
  this.relatedContent = null;
  this.cacheKey = null;
  this.cacheExpires = null;
  if (args) {
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.notebooks !== undefined) {
      this.notebooks = args.notebooks;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.containingNotebooks !== undefined) {
      this.containingNotebooks = args.containingNotebooks;
    }
    if (args.debugInfo !== undefined) {
      this.debugInfo = args.debugInfo;
    }
    if (args.experts !== undefined) {
      this.experts = args.experts;
    }
    if (args.relatedContent !== undefined) {
      this.relatedContent = args.relatedContent;
    }
    if (args.cacheKey !== undefined) {
      this.cacheKey = args.cacheKey;
    }
    if (args.cacheExpires !== undefined) {
      this.cacheExpires = args.cacheExpires;
    }
  }
};
RelatedResult.prototype = {};
RelatedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.notes = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new Note();
          elem202.read(input);
          this.notes.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size203 = 0;
        var _rtmp3207;
        this.notebooks = [];
        var _etype206 = 0;
        _rtmp3207 = input.readListBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = new Notebook();
          elem209.read(input);
          this.notebooks.push(elem209);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.tags = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = new Tag();
          elem216.read(input);
          this.tags.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size217 = 0;
        var _rtmp3221;
        this.containingNotebooks = [];
        var _etype220 = 0;
        _rtmp3221 = input.readListBegin();
        _etype220 = _rtmp3221.etype;
        _size217 = _rtmp3221.size;
        for (var _i222 = 0; _i222 < _size217; ++_i222)
        {
          var elem223 = null;
          elem223 = new NotebookDescriptor();
          elem223.read(input);
          this.containingNotebooks.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.experts = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = new UserProfile();
          elem230.read(input);
          this.experts.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size231 = 0;
        var _rtmp3235;
        this.relatedContent = [];
        var _etype234 = 0;
        _rtmp3235 = input.readListBegin();
        _etype234 = _rtmp3235.etype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          var elem237 = null;
          elem237 = new RelatedContent();
          elem237.read(input);
          this.relatedContent.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.cacheKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.cacheExpires = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResult.prototype.write = function(output) {
  output.writeStructBegin('RelatedResult');
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter238 in this.notes)
    {
      if (this.notes.hasOwnProperty(iter238))
      {
        iter238 = this.notes[iter238];
        iter238.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter239 in this.notebooks)
    {
      if (this.notebooks.hasOwnProperty(iter239))
      {
        iter239 = this.notebooks[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter240 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter240))
      {
        iter240 = this.tags[iter240];
        iter240.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containingNotebooks !== null && this.containingNotebooks !== undefined) {
    output.writeFieldBegin('containingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.containingNotebooks.length);
    for (var iter241 in this.containingNotebooks)
    {
      if (this.containingNotebooks.hasOwnProperty(iter241))
      {
        iter241 = this.containingNotebooks[iter241];
        iter241.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 5);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  if (this.experts !== null && this.experts !== undefined) {
    output.writeFieldBegin('experts', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.experts.length);
    for (var iter242 in this.experts)
    {
      if (this.experts.hasOwnProperty(iter242))
      {
        iter242 = this.experts[iter242];
        iter242.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedContent !== null && this.relatedContent !== undefined) {
    output.writeFieldBegin('relatedContent', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.relatedContent.length);
    for (var iter243 in this.relatedContent)
    {
      if (this.relatedContent.hasOwnProperty(iter243))
      {
        iter243 = this.relatedContent[iter243];
        iter243.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cacheKey !== null && this.cacheKey !== undefined) {
    output.writeFieldBegin('cacheKey', Thrift.Type.STRING, 8);
    output.writeString(this.cacheKey);
    output.writeFieldEnd();
  }
  if (this.cacheExpires !== null && this.cacheExpires !== undefined) {
    output.writeFieldBegin('cacheExpires', Thrift.Type.I32, 9);
    output.writeI32(this.cacheExpires);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelatedResultSpec = function(args) {
  this.maxNotes = null;
  this.maxNotebooks = null;
  this.maxTags = null;
  this.writableNotebooksOnly = null;
  this.includeContainingNotebooks = null;
  this.includeDebugInfo = null;
  this.maxExperts = null;
  this.maxRelatedContent = null;
  this.relatedContentTypes = null;
  if (args) {
    if (args.maxNotes !== undefined) {
      this.maxNotes = args.maxNotes;
    }
    if (args.maxNotebooks !== undefined) {
      this.maxNotebooks = args.maxNotebooks;
    }
    if (args.maxTags !== undefined) {
      this.maxTags = args.maxTags;
    }
    if (args.writableNotebooksOnly !== undefined) {
      this.writableNotebooksOnly = args.writableNotebooksOnly;
    }
    if (args.includeContainingNotebooks !== undefined) {
      this.includeContainingNotebooks = args.includeContainingNotebooks;
    }
    if (args.includeDebugInfo !== undefined) {
      this.includeDebugInfo = args.includeDebugInfo;
    }
    if (args.maxExperts !== undefined) {
      this.maxExperts = args.maxExperts;
    }
    if (args.maxRelatedContent !== undefined) {
      this.maxRelatedContent = args.maxRelatedContent;
    }
    if (args.relatedContentTypes !== undefined) {
      this.relatedContentTypes = args.relatedContentTypes;
    }
  }
};
RelatedResultSpec.prototype = {};
RelatedResultSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxNotebooks = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTags = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.writableNotebooksOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContainingNotebooks = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDebugInfo = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxExperts = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.maxRelatedContent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size244 = 0;
        var _rtmp3248;
        this.relatedContentTypes = [];
        var _etype247 = 0;
        _rtmp3248 = input.readSetBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = input.readI32().value;
          this.relatedContentTypes.push(elem250);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResultSpec.prototype.write = function(output) {
  output.writeStructBegin('RelatedResultSpec');
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 1);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.maxNotebooks !== null && this.maxNotebooks !== undefined) {
    output.writeFieldBegin('maxNotebooks', Thrift.Type.I32, 2);
    output.writeI32(this.maxNotebooks);
    output.writeFieldEnd();
  }
  if (this.maxTags !== null && this.maxTags !== undefined) {
    output.writeFieldBegin('maxTags', Thrift.Type.I32, 3);
    output.writeI32(this.maxTags);
    output.writeFieldEnd();
  }
  if (this.writableNotebooksOnly !== null && this.writableNotebooksOnly !== undefined) {
    output.writeFieldBegin('writableNotebooksOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.writableNotebooksOnly);
    output.writeFieldEnd();
  }
  if (this.includeContainingNotebooks !== null && this.includeContainingNotebooks !== undefined) {
    output.writeFieldBegin('includeContainingNotebooks', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContainingNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeDebugInfo !== null && this.includeDebugInfo !== undefined) {
    output.writeFieldBegin('includeDebugInfo', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeDebugInfo);
    output.writeFieldEnd();
  }
  if (this.maxExperts !== null && this.maxExperts !== undefined) {
    output.writeFieldBegin('maxExperts', Thrift.Type.I32, 7);
    output.writeI32(this.maxExperts);
    output.writeFieldEnd();
  }
  if (this.maxRelatedContent !== null && this.maxRelatedContent !== undefined) {
    output.writeFieldBegin('maxRelatedContent', Thrift.Type.I32, 8);
    output.writeI32(this.maxRelatedContent);
    output.writeFieldEnd();
  }
  if (this.relatedContentTypes !== null && this.relatedContentTypes !== undefined) {
    output.writeFieldBegin('relatedContentTypes', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.I32, this.relatedContentTypes.length);
    for (var iter251 in this.relatedContentTypes)
    {
      if (this.relatedContentTypes.hasOwnProperty(iter251))
      {
        iter251 = this.relatedContentTypes[iter251];
        output.writeI32(iter251);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpdateNoteIfUsnMatchesResult = function(args) {
  this.note = null;
  this.updated = null;
  if (args) {
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.updated !== undefined) {
      this.updated = args.updated;
    }
  }
};
UpdateNoteIfUsnMatchesResult.prototype = {};
UpdateNoteIfUsnMatchesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.updated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateNoteIfUsnMatchesResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateNoteIfUsnMatchesResult');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.BOOL, 2);
    output.writeBool(this.updated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShareRelationshipRestrictions = function(args) {
  this.noSetReadOnly = null;
  this.noSetReadPlusActivity = null;
  this.noSetModify = null;
  this.noSetFullAccess = null;
  if (args) {
    if (args.noSetReadOnly !== undefined) {
      this.noSetReadOnly = args.noSetReadOnly;
    }
    if (args.noSetReadPlusActivity !== undefined) {
      this.noSetReadPlusActivity = args.noSetReadPlusActivity;
    }
    if (args.noSetModify !== undefined) {
      this.noSetModify = args.noSetModify;
    }
    if (args.noSetFullAccess !== undefined) {
      this.noSetFullAccess = args.noSetFullAccess;
    }
  }
};
ShareRelationshipRestrictions.prototype = {};
ShareRelationshipRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadPlusActivity = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetModify = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetFullAccess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationshipRestrictions.prototype.write = function(output) {
  output.writeStructBegin('ShareRelationshipRestrictions');
  if (this.noSetReadOnly !== null && this.noSetReadOnly !== undefined) {
    output.writeFieldBegin('noSetReadOnly', Thrift.Type.BOOL, 1);
    output.writeBool(this.noSetReadOnly);
    output.writeFieldEnd();
  }
  if (this.noSetReadPlusActivity !== null && this.noSetReadPlusActivity !== undefined) {
    output.writeFieldBegin('noSetReadPlusActivity', Thrift.Type.BOOL, 2);
    output.writeBool(this.noSetReadPlusActivity);
    output.writeFieldEnd();
  }
  if (this.noSetModify !== null && this.noSetModify !== undefined) {
    output.writeFieldBegin('noSetModify', Thrift.Type.BOOL, 3);
    output.writeBool(this.noSetModify);
    output.writeFieldEnd();
  }
  if (this.noSetFullAccess !== null && this.noSetFullAccess !== undefined) {
    output.writeFieldBegin('noSetFullAccess', Thrift.Type.BOOL, 4);
    output.writeBool(this.noSetFullAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvitationShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserIdentity = null;
  this.privilege = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserIdentity !== undefined) {
      this.recipientUserIdentity = args.recipientUserIdentity;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
InvitationShareRelationship.prototype = {};
InvitationShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientUserIdentity = new UserIdentity();
        this.recipientUserIdentity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('InvitationShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserIdentity !== null && this.recipientUserIdentity !== undefined) {
    output.writeFieldBegin('recipientUserIdentity', Thrift.Type.STRUCT, 2);
    this.recipientUserIdentity.write(output);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MemberShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserId = null;
  this.bestPrivilege = null;
  this.individualPrivilege = null;
  this.restrictions = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserId !== undefined) {
      this.recipientUserId = args.recipientUserId;
    }
    if (args.bestPrivilege !== undefined) {
      this.bestPrivilege = args.bestPrivilege;
    }
    if (args.individualPrivilege !== undefined) {
      this.individualPrivilege = args.individualPrivilege;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
MemberShareRelationship.prototype = {};
MemberShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recipientUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bestPrivilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.individualPrivilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new ShareRelationshipRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MemberShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('MemberShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserId !== null && this.recipientUserId !== undefined) {
    output.writeFieldBegin('recipientUserId', Thrift.Type.I32, 2);
    output.writeI32(this.recipientUserId);
    output.writeFieldEnd();
  }
  if (this.bestPrivilege !== null && this.bestPrivilege !== undefined) {
    output.writeFieldBegin('bestPrivilege', Thrift.Type.I32, 3);
    output.writeI32(this.bestPrivilege);
    output.writeFieldEnd();
  }
  if (this.individualPrivilege !== null && this.individualPrivilege !== undefined) {
    output.writeFieldBegin('individualPrivilege', Thrift.Type.I32, 4);
    output.writeI32(this.individualPrivilege);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 5);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 6);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShareRelationships = function(args) {
  this.invitations = null;
  this.memberships = null;
  this.invitationRestrictions = null;
  if (args) {
    if (args.invitations !== undefined) {
      this.invitations = args.invitations;
    }
    if (args.memberships !== undefined) {
      this.memberships = args.memberships;
    }
    if (args.invitationRestrictions !== undefined) {
      this.invitationRestrictions = args.invitationRestrictions;
    }
  }
};
ShareRelationships.prototype = {};
ShareRelationships.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.invitations = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = new InvitationShareRelationship();
          elem258.read(input);
          this.invitations.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size259 = 0;
        var _rtmp3263;
        this.memberships = [];
        var _etype262 = 0;
        _rtmp3263 = input.readListBegin();
        _etype262 = _rtmp3263.etype;
        _size259 = _rtmp3263.size;
        for (var _i264 = 0; _i264 < _size259; ++_i264)
        {
          var elem265 = null;
          elem265 = new MemberShareRelationship();
          elem265.read(input);
          this.memberships.push(elem265);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitationRestrictions = new ShareRelationshipRestrictions();
        this.invitationRestrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationships.prototype.write = function(output) {
  output.writeStructBegin('ShareRelationships');
  if (this.invitations !== null && this.invitations !== undefined) {
    output.writeFieldBegin('invitations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitations.length);
    for (var iter266 in this.invitations)
    {
      if (this.invitations.hasOwnProperty(iter266))
      {
        iter266 = this.invitations[iter266];
        iter266.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.memberships !== null && this.memberships !== undefined) {
    output.writeFieldBegin('memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memberships.length);
    for (var iter267 in this.memberships)
    {
      if (this.memberships.hasOwnProperty(iter267))
      {
        iter267 = this.memberships[iter267];
        iter267.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationRestrictions !== null && this.invitationRestrictions !== undefined) {
    output.writeFieldBegin('invitationRestrictions', Thrift.Type.STRUCT, 3);
    this.invitationRestrictions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesParameters = function(args) {
  this.notebookGuid = null;
  this.inviteMessage = null;
  this.membershipsToUpdate = null;
  this.invitationsToCreateOrUpdate = null;
  this.unshares = null;
  if (args) {
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.inviteMessage !== undefined) {
      this.inviteMessage = args.inviteMessage;
    }
    if (args.membershipsToUpdate !== undefined) {
      this.membershipsToUpdate = args.membershipsToUpdate;
    }
    if (args.invitationsToCreateOrUpdate !== undefined) {
      this.invitationsToCreateOrUpdate = args.invitationsToCreateOrUpdate;
    }
    if (args.unshares !== undefined) {
      this.unshares = args.unshares;
    }
  }
};
ManageNotebookSharesParameters.prototype = {};
ManageNotebookSharesParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inviteMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.membershipsToUpdate = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new MemberShareRelationship();
          elem274.read(input);
          this.membershipsToUpdate.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size275 = 0;
        var _rtmp3279;
        this.invitationsToCreateOrUpdate = [];
        var _etype278 = 0;
        _rtmp3279 = input.readListBegin();
        _etype278 = _rtmp3279.etype;
        _size275 = _rtmp3279.size;
        for (var _i280 = 0; _i280 < _size275; ++_i280)
        {
          var elem281 = null;
          elem281 = new InvitationShareRelationship();
          elem281.read(input);
          this.invitationsToCreateOrUpdate.push(elem281);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size282 = 0;
        var _rtmp3286;
        this.unshares = [];
        var _etype285 = 0;
        _rtmp3286 = input.readListBegin();
        _etype285 = _rtmp3286.etype;
        _size282 = _rtmp3286.size;
        for (var _i287 = 0; _i287 < _size282; ++_i287)
        {
          var elem288 = null;
          elem288 = new UserIdentity();
          elem288.read(input);
          this.unshares.push(elem288);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesParameters.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesParameters');
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 1);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.inviteMessage !== null && this.inviteMessage !== undefined) {
    output.writeFieldBegin('inviteMessage', Thrift.Type.STRING, 2);
    output.writeString(this.inviteMessage);
    output.writeFieldEnd();
  }
  if (this.membershipsToUpdate !== null && this.membershipsToUpdate !== undefined) {
    output.writeFieldBegin('membershipsToUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.membershipsToUpdate.length);
    for (var iter289 in this.membershipsToUpdate)
    {
      if (this.membershipsToUpdate.hasOwnProperty(iter289))
      {
        iter289 = this.membershipsToUpdate[iter289];
        iter289.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToCreateOrUpdate !== null && this.invitationsToCreateOrUpdate !== undefined) {
    output.writeFieldBegin('invitationsToCreateOrUpdate', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitationsToCreateOrUpdate.length);
    for (var iter290 in this.invitationsToCreateOrUpdate)
    {
      if (this.invitationsToCreateOrUpdate.hasOwnProperty(iter290))
      {
        iter290 = this.invitationsToCreateOrUpdate[iter290];
        iter290.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unshares !== null && this.unshares !== undefined) {
    output.writeFieldBegin('unshares', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.unshares.length);
    for (var iter291 in this.unshares)
    {
      if (this.unshares.hasOwnProperty(iter291))
      {
        iter291 = this.unshares[iter291];
        iter291.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesError = function(args) {
  this.userIdentity = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userIdentity !== undefined) {
      this.userIdentity = args.userIdentity;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
ManageNotebookSharesError.prototype = {};
ManageNotebookSharesError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userIdentity = new UserIdentity();
        this.userIdentity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesError.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesError');
  if (this.userIdentity !== null && this.userIdentity !== undefined) {
    output.writeFieldBegin('userIdentity', Thrift.Type.STRUCT, 1);
    this.userIdentity.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNotebookSharesResult = function(args) {
  this.errors = null;
  if (args) {
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
ManageNotebookSharesResult.prototype = {};
ManageNotebookSharesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.errors = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = new ManageNotebookSharesError();
          elem298.read(input);
          this.errors.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesResult.prototype.write = function(output) {
  output.writeStructBegin('ManageNotebookSharesResult');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter299 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter299))
      {
        iter299 = this.errors[iter299];
        iter299.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SharedNoteTemplate = function(args) {
  this.noteGuid = null;
  this.recipientThreadId = null;
  this.recipientContacts = null;
  this.privilege = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.recipientThreadId !== undefined) {
      this.recipientThreadId = args.recipientThreadId;
    }
    if (args.recipientContacts !== undefined) {
      this.recipientContacts = args.recipientContacts;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
  }
};
SharedNoteTemplate.prototype = {};
SharedNoteTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.recipientThreadId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size300 = 0;
        var _rtmp3304;
        this.recipientContacts = [];
        var _etype303 = 0;
        _rtmp3304 = input.readListBegin();
        _etype303 = _rtmp3304.etype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          var elem306 = null;
          elem306 = new Contact();
          elem306.read(input);
          this.recipientContacts.push(elem306);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNoteTemplate.prototype.write = function(output) {
  output.writeStructBegin('SharedNoteTemplate');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.recipientThreadId !== null && this.recipientThreadId !== undefined) {
    output.writeFieldBegin('recipientThreadId', Thrift.Type.I64, 4);
    output.writeI64(this.recipientThreadId);
    output.writeFieldEnd();
  }
  if (this.recipientContacts !== null && this.recipientContacts !== undefined) {
    output.writeFieldBegin('recipientContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recipientContacts.length);
    for (var iter307 in this.recipientContacts)
    {
      if (this.recipientContacts.hasOwnProperty(iter307))
      {
        iter307 = this.recipientContacts[iter307];
        iter307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotebookShareTemplate = function(args) {
  this.notebookGuid = null;
  this.recipientThreadId = null;
  this.recipientContacts = null;
  this.privilege = null;
  if (args) {
    if (args.notebookGuid !== undefined) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.recipientThreadId !== undefined) {
      this.recipientThreadId = args.recipientThreadId;
    }
    if (args.recipientContacts !== undefined) {
      this.recipientContacts = args.recipientContacts;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
  }
};
NotebookShareTemplate.prototype = {};
NotebookShareTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.recipientThreadId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size308 = 0;
        var _rtmp3312;
        this.recipientContacts = [];
        var _etype311 = 0;
        _rtmp3312 = input.readListBegin();
        _etype311 = _rtmp3312.etype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var elem314 = null;
          elem314 = new Contact();
          elem314.read(input);
          this.recipientContacts.push(elem314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookShareTemplate.prototype.write = function(output) {
  output.writeStructBegin('NotebookShareTemplate');
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 1);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.recipientThreadId !== null && this.recipientThreadId !== undefined) {
    output.writeFieldBegin('recipientThreadId', Thrift.Type.I64, 4);
    output.writeI64(this.recipientThreadId);
    output.writeFieldEnd();
  }
  if (this.recipientContacts !== null && this.recipientContacts !== undefined) {
    output.writeFieldBegin('recipientContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recipientContacts.length);
    for (var iter315 in this.recipientContacts)
    {
      if (this.recipientContacts.hasOwnProperty(iter315))
      {
        iter315 = this.recipientContacts[iter315];
        iter315.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CreateOrUpdateNotebookSharesResult = function(args) {
  this.updateSequenceNum = null;
  this.matchingShares = null;
  if (args) {
    if (args.updateSequenceNum !== undefined) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.matchingShares !== undefined) {
      this.matchingShares = args.matchingShares;
    }
  }
};
CreateOrUpdateNotebookSharesResult.prototype = {};
CreateOrUpdateNotebookSharesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size316 = 0;
        var _rtmp3320;
        this.matchingShares = [];
        var _etype319 = 0;
        _rtmp3320 = input.readListBegin();
        _etype319 = _rtmp3320.etype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var elem322 = null;
          elem322 = new SharedNotebook();
          elem322.read(input);
          this.matchingShares.push(elem322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateOrUpdateNotebookSharesResult.prototype.write = function(output) {
  output.writeStructBegin('CreateOrUpdateNotebookSharesResult');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.matchingShares !== null && this.matchingShares !== undefined) {
    output.writeFieldBegin('matchingShares', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.matchingShares.length);
    for (var iter323 in this.matchingShares)
    {
      if (this.matchingShares.hasOwnProperty(iter323))
      {
        iter323 = this.matchingShares[iter323];
        iter323.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteShareRelationshipRestrictions = function(args) {
  this.noSetReadNote = null;
  this.noSetModifyNote = null;
  this.noSetFullAccess = null;
  if (args) {
    if (args.noSetReadNote !== undefined) {
      this.noSetReadNote = args.noSetReadNote;
    }
    if (args.noSetModifyNote !== undefined) {
      this.noSetModifyNote = args.noSetModifyNote;
    }
    if (args.noSetFullAccess !== undefined) {
      this.noSetFullAccess = args.noSetFullAccess;
    }
  }
};
NoteShareRelationshipRestrictions.prototype = {};
NoteShareRelationshipRestrictions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadNote = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetModifyNote = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetFullAccess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteShareRelationshipRestrictions.prototype.write = function(output) {
  output.writeStructBegin('NoteShareRelationshipRestrictions');
  if (this.noSetReadNote !== null && this.noSetReadNote !== undefined) {
    output.writeFieldBegin('noSetReadNote', Thrift.Type.BOOL, 1);
    output.writeBool(this.noSetReadNote);
    output.writeFieldEnd();
  }
  if (this.noSetModifyNote !== null && this.noSetModifyNote !== undefined) {
    output.writeFieldBegin('noSetModifyNote', Thrift.Type.BOOL, 2);
    output.writeBool(this.noSetModifyNote);
    output.writeFieldEnd();
  }
  if (this.noSetFullAccess !== null && this.noSetFullAccess !== undefined) {
    output.writeFieldBegin('noSetFullAccess', Thrift.Type.BOOL, 3);
    output.writeBool(this.noSetFullAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteMemberShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserId = null;
  this.privilege = null;
  this.restrictions = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserId !== undefined) {
      this.recipientUserId = args.recipientUserId;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.restrictions !== undefined) {
      this.restrictions = args.restrictions;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
NoteMemberShareRelationship.prototype = {};
NoteMemberShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recipientUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new NoteShareRelationshipRestrictions();
        this.restrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMemberShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('NoteMemberShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserId !== null && this.recipientUserId !== undefined) {
    output.writeFieldBegin('recipientUserId', Thrift.Type.I32, 2);
    output.writeI32(this.recipientUserId);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 4);
    this.restrictions.write(output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteInvitationShareRelationship = function(args) {
  this.displayName = null;
  this.recipientIdentityId = null;
  this.privilege = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.recipientIdentityId !== undefined) {
      this.recipientIdentityId = args.recipientIdentityId;
    }
    if (args.privilege !== undefined) {
      this.privilege = args.privilege;
    }
    if (args.sharerUserId !== undefined) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
NoteInvitationShareRelationship.prototype = {};
NoteInvitationShareRelationship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.recipientIdentityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteInvitationShareRelationship.prototype.write = function(output) {
  output.writeStructBegin('NoteInvitationShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientIdentityId !== null && this.recipientIdentityId !== undefined) {
    output.writeFieldBegin('recipientIdentityId', Thrift.Type.I64, 2);
    output.writeI64(this.recipientIdentityId);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoteShareRelationships = function(args) {
  this.invitations = null;
  this.memberships = null;
  this.invitationRestrictions = null;
  if (args) {
    if (args.invitations !== undefined) {
      this.invitations = args.invitations;
    }
    if (args.memberships !== undefined) {
      this.memberships = args.memberships;
    }
    if (args.invitationRestrictions !== undefined) {
      this.invitationRestrictions = args.invitationRestrictions;
    }
  }
};
NoteShareRelationships.prototype = {};
NoteShareRelationships.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size324 = 0;
        var _rtmp3328;
        this.invitations = [];
        var _etype327 = 0;
        _rtmp3328 = input.readListBegin();
        _etype327 = _rtmp3328.etype;
        _size324 = _rtmp3328.size;
        for (var _i329 = 0; _i329 < _size324; ++_i329)
        {
          var elem330 = null;
          elem330 = new NoteInvitationShareRelationship();
          elem330.read(input);
          this.invitations.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size331 = 0;
        var _rtmp3335;
        this.memberships = [];
        var _etype334 = 0;
        _rtmp3335 = input.readListBegin();
        _etype334 = _rtmp3335.etype;
        _size331 = _rtmp3335.size;
        for (var _i336 = 0; _i336 < _size331; ++_i336)
        {
          var elem337 = null;
          elem337 = new NoteMemberShareRelationship();
          elem337.read(input);
          this.memberships.push(elem337);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitationRestrictions = new NoteShareRelationshipRestrictions();
        this.invitationRestrictions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteShareRelationships.prototype.write = function(output) {
  output.writeStructBegin('NoteShareRelationships');
  if (this.invitations !== null && this.invitations !== undefined) {
    output.writeFieldBegin('invitations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitations.length);
    for (var iter338 in this.invitations)
    {
      if (this.invitations.hasOwnProperty(iter338))
      {
        iter338 = this.invitations[iter338];
        iter338.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.memberships !== null && this.memberships !== undefined) {
    output.writeFieldBegin('memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memberships.length);
    for (var iter339 in this.memberships)
    {
      if (this.memberships.hasOwnProperty(iter339))
      {
        iter339 = this.memberships[iter339];
        iter339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationRestrictions !== null && this.invitationRestrictions !== undefined) {
    output.writeFieldBegin('invitationRestrictions', Thrift.Type.STRUCT, 3);
    this.invitationRestrictions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNoteSharesParameters = function(args) {
  this.noteGuid = null;
  this.membershipsToUpdate = null;
  this.invitationsToUpdate = null;
  this.membershipsToUnshare = null;
  this.invitationsToUnshare = null;
  if (args) {
    if (args.noteGuid !== undefined) {
      this.noteGuid = args.noteGuid;
    }
    if (args.membershipsToUpdate !== undefined) {
      this.membershipsToUpdate = args.membershipsToUpdate;
    }
    if (args.invitationsToUpdate !== undefined) {
      this.invitationsToUpdate = args.invitationsToUpdate;
    }
    if (args.membershipsToUnshare !== undefined) {
      this.membershipsToUnshare = args.membershipsToUnshare;
    }
    if (args.invitationsToUnshare !== undefined) {
      this.invitationsToUnshare = args.invitationsToUnshare;
    }
  }
};
ManageNoteSharesParameters.prototype = {};
ManageNoteSharesParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.membershipsToUpdate = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new NoteMemberShareRelationship();
          elem346.read(input);
          this.membershipsToUpdate.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size347 = 0;
        var _rtmp3351;
        this.invitationsToUpdate = [];
        var _etype350 = 0;
        _rtmp3351 = input.readListBegin();
        _etype350 = _rtmp3351.etype;
        _size347 = _rtmp3351.size;
        for (var _i352 = 0; _i352 < _size347; ++_i352)
        {
          var elem353 = null;
          elem353 = new NoteInvitationShareRelationship();
          elem353.read(input);
          this.invitationsToUpdate.push(elem353);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.membershipsToUnshare = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = input.readI32().value;
          this.membershipsToUnshare.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size361 = 0;
        var _rtmp3365;
        this.invitationsToUnshare = [];
        var _etype364 = 0;
        _rtmp3365 = input.readListBegin();
        _etype364 = _rtmp3365.etype;
        _size361 = _rtmp3365.size;
        for (var _i366 = 0; _i366 < _size361; ++_i366)
        {
          var elem367 = null;
          elem367 = input.readI64().value;
          this.invitationsToUnshare.push(elem367);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesParameters.prototype.write = function(output) {
  output.writeStructBegin('ManageNoteSharesParameters');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.membershipsToUpdate !== null && this.membershipsToUpdate !== undefined) {
    output.writeFieldBegin('membershipsToUpdate', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.membershipsToUpdate.length);
    for (var iter368 in this.membershipsToUpdate)
    {
      if (this.membershipsToUpdate.hasOwnProperty(iter368))
      {
        iter368 = this.membershipsToUpdate[iter368];
        iter368.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToUpdate !== null && this.invitationsToUpdate !== undefined) {
    output.writeFieldBegin('invitationsToUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitationsToUpdate.length);
    for (var iter369 in this.invitationsToUpdate)
    {
      if (this.invitationsToUpdate.hasOwnProperty(iter369))
      {
        iter369 = this.invitationsToUpdate[iter369];
        iter369.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.membershipsToUnshare !== null && this.membershipsToUnshare !== undefined) {
    output.writeFieldBegin('membershipsToUnshare', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.membershipsToUnshare.length);
    for (var iter370 in this.membershipsToUnshare)
    {
      if (this.membershipsToUnshare.hasOwnProperty(iter370))
      {
        iter370 = this.membershipsToUnshare[iter370];
        output.writeI32(iter370);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToUnshare !== null && this.invitationsToUnshare !== undefined) {
    output.writeFieldBegin('invitationsToUnshare', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.invitationsToUnshare.length);
    for (var iter371 in this.invitationsToUnshare)
    {
      if (this.invitationsToUnshare.hasOwnProperty(iter371))
      {
        iter371 = this.invitationsToUnshare[iter371];
        output.writeI64(iter371);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNoteSharesError = function(args) {
  this.identityID = null;
  this.userID = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.identityID !== undefined) {
      this.identityID = args.identityID;
    }
    if (args.userID !== undefined) {
      this.userID = args.userID;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
  }
};
ManageNoteSharesError.prototype = {};
ManageNoteSharesError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.identityID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesError.prototype.write = function(output) {
  output.writeStructBegin('ManageNoteSharesError');
  if (this.identityID !== null && this.identityID !== undefined) {
    output.writeFieldBegin('identityID', Thrift.Type.I64, 1);
    output.writeI64(this.identityID);
    output.writeFieldEnd();
  }
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.I32, 2);
    output.writeI32(this.userID);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 3);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 4);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManageNoteSharesResult = function(args) {
  this.errors = null;
  if (args) {
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
ManageNoteSharesResult.prototype = {};
ManageNoteSharesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size372 = 0;
        var _rtmp3376;
        this.errors = [];
        var _etype375 = 0;
        _rtmp3376 = input.readListBegin();
        _etype375 = _rtmp3376.etype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var elem378 = null;
          elem378 = new ManageNoteSharesError();
          elem378.read(input);
          this.errors.push(elem378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesResult.prototype.write = function(output) {
  output.writeStructBegin('ManageNoteSharesResult');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter379 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter379))
      {
        iter379 = this.errors[iter379];
        iter379.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

